# Frontend Project Code Export
Export date: 2/13/2025, 11:04:17 AM

`src/apis/applications/index.ts`
```ts
import { request } from '@/configs/requests'

interface IApplications {
  page: number
  limit: number
  type_code: number
}

export const getAllApplications = async ({ params, type_code }: any) => {
  return await request('/application/get/filtered', {
    params: {
      page: params.page,
      limit: params.limit,
      type_code,
    },
  })
}

export const getByIDApplications = async <T>(id: T) => {
  return await request(`/application/get/${id}`)
}

export const rejectApplications = async (payload: any) => {
  return await request.post(`/application/reject/${payload?.id}`, { comment: payload?.comment })
}

export const acceptApplications = async <T>(id: any, data?: T) => {
  return await request.post(`/application/accept/${id}`, data)
}

export const getMeteoStations = async () => {
  return await request('meteo/stations')
}

```
- - - - -

`src/apis/contracts/index.ts`
```ts
import { request } from '@/configs/requests'

export const getAllContracts = async ({ params, type_code }: any) => {
  return await request('/contract/get/filtered', {
    params: {
      page: params.page,
      limit: params.limit,
      type_code,
    },
  })
}
export const acceptContract = async <T>(id: T) => {
  return await request(`/contract/accept/${id}`)
}

export const contractGenerateDoc = async <T>(id: T) => {
  return await request(`/contract/generate-doc/${id}`)
}

export const contractDetail = async <T>(id: T) => {
  return await request(`/contract/get/${id}`)
}

```
- - - - -

`src/apis/login/index.ts`
```ts
import { request } from '@/configs/requests'

export const login = async <T>(data: T) => {
  return await request.post('/auth/login', data)
}

```
- - - - -

`src/apis/map/index.ts`
```ts
import { request } from '@/configs/requests'
import { type KMLData } from '@/types/poligon'

export const getData = async () => {
  return await request<KMLData>('response.json')
}

```
- - - - -

`src/apis/ndvi/index.ts`
```ts
import { request } from '@/configs/requests'

export const getNdviWithContour = async (id: string | undefined) => {
  return await request(`ndvi/contour/${id}`)
}

```
- - - - -

`src/components/archive/index.tsx`
```javascript
// import { ReactComponent as IconCheck } from '@/assets/icons/check.svg'
// import { ReactComponent as IconClose } from '@/assets/icons/close.svg'
// import { ReactComponent as IconEyes } from '@/assets/icons/eyes.svg'
{
  /* <IconButton
            sx={{
              borderRadius: '4px !important',
              backgroundColor: 'rgba(8, 112, 95, 0.20)',
            }}
            onClick={() => {
              accept(id)
            }}
          >
            <IconCheck />
          </IconButton>
          <IconButton
            sx={{
              borderRadius: '4px !important',
              backgroundColor: 'rgba(235, 87, 87, 0.20)',
            }}
            onClick={() => {
              reject(id)
            }}
          >
            <IconClose />
          </IconButton>
          <IconButton
            sx={{
              borderRadius: '4px !important',
              backgroundColor: 'rgba(62, 91, 116, 0.20)',
            }}
            onClick={() => {
              handleOpen(info)
            }}
          >
            <IconEyes />
          </IconButton> */
}

```
- - - - -

`src/components/breadcrumb/index.tsx`
```javascript
import { location } from '@/constants/location'
import { Breadcrumbs, Link, Stack, Typography } from '@mui/material'
import { useLocation } from 'react-router-dom'

export default function BreadcrumpCustom() {
  const { pathname } = useLocation()
  const pathSegments = pathname.split('/').slice(1)

  const breadcrumbs = pathSegments.map((segment, i) => {
    const newPath = location.find(el => el.path === segment)

    if (!newPath) return null
    const isLast = i === pathSegments.length - 1
    const href = `/${pathSegments.slice(0, i + 1).join('/')}`

    return isLast ? (
      <Typography
        key={href}
        color='text.primary'
        variant='subtitle1'
        fontWeight='light'
        fontSize='18px'
        fontFamily='GothamProRegular'
      >
        {newPath.name}
      </Typography>
    ) : (
      <Link
        key={href}
        color='#ABAEB1'
        underline='none'
        href={href}
        variant='subtitle1'
        fontWeight='light'
        fontSize='14px'
        fontFamily='GothamProRegular'
      >
        {newPath.name}
      </Link>
    )
  })

  return (
    <Stack py='20px'>
      <Breadcrumbs separator='>' aria-label='breadcrumb'>
        {breadcrumbs}
      </Breadcrumbs>
    </Stack>
  )
}

```
- - - - -

`src/components/empty/empty.tsx`
```javascript
import { Stack, Typography } from '@mui/material'

export const Empty = () => {
  return (
    <Stack width='100%' direction='row' justifyContent='center'>
      <Typography
        sx={{
          fontFamily: 'GothamProRegular',
          fontSize: 16,
        }}
      >
        Ma'lumot mavjud emas!
      </Typography>
    </Stack>
  )
}

```
- - - - -

`src/components/empty/index.ts`
```ts
export { Empty } from './empty'

```
- - - - -

`src/components/filter/filter.tsx`
```javascript
import { CustomRadioGroup } from '@/components/radio'
import { filter } from '@/constants/filter'
import { Stack } from '@mui/material'

export const Filter = () => {
  return (
    <Stack
      width='100%'
      borderRadius='12px'
      p='32px 24px'
      mx='auto'
      gap='24px'
      bgcolor={theme => theme.palette.allColors.WHITE}
    >
      <CustomRadioGroup options={filter} />
    </Stack>
  )
}

```
- - - - -

`src/components/filter/index.ts`
```ts
export { Filter } from './filter'

```
- - - - -

`src/components/footer/footer.tsx`
```javascript
import { Container, Stack, Typography } from '@mui/material'
import { ReactComponent as Logo } from '@/assets/icons/itrain.svg'
import { ReactComponent as Logogreeen } from '@/assets/icons/logo-green.svg'
import { Link } from 'react-router-dom'

export const Foooter = () => {
  return (
    <Stack width='100%'>
      <Stack width='100%' py='48px' bgcolor={theme => theme.palette.allColors.WHITE}>
        <Container>
          <Stack direction='row' justifyContent='space-between' width='100%' alignItems='center'>
            <Stack
              gap='24px'
              width='300px'
              sx={{
                svg: {
                  width: '130px',
                },
              }}
            >
              <Logogreeen />
              <Typography
                fontSize='14px'
                color={theme => theme.palette.allColors.GREY10}
                fontFamily='GothamProRegular'
              >
                Agrosanoat sohasida sug'urtalashni avtomatlashtirilgan tizimi
              </Typography>
            </Stack>
            <Stack gap='4px'>
              <Typography
                color={theme => theme.palette.allColors.BLACK}
                fontFamily='GothamProRegular'
              >
                Sahifalar
              </Typography>
              <Typography
                color={theme => theme.palette.allColors.GREY10}
                component='span'
                fontFamily='GothamProRegular'
              >
                Yer maydonlari
              </Typography>
              <Typography
                color={theme => theme.palette.allColors.GREY10}
                component='span'
                fontFamily='GothamProRegular'
              >
                Ekin joylash
              </Typography>
              <Typography
                color={theme => theme.palette.allColors.GREY10}
                component='span'
                fontFamily='GothamProRegular'
              >
                Moliyalashtirish
              </Typography>
            </Stack>
            <Stack gap='4px'>
              <Typography
                color={theme => theme.palette.allColors.GREY10}
                fontFamily='GothamProRegular'
              >
                Shartnomalar
              </Typography>
              <Typography
                color={theme => theme.palette.allColors.GREY10}
                component='span'
                fontFamily='GothamProRegular'
              >
                Agrotexnik tadbirlar
              </Typography>
            </Stack>
            <Stack gap='4px'>
              <Typography color={theme => theme.palette.allColors.BLACK}>Aloqa</Typography>
              <Typography
                component={Link}
                to='tel:+998902339809'
                color={theme => theme.palette.allColors.BLACK}
                sx={{ textDecoration: 'none' }}
                fontFamily='GothamProRegular'
              >
                <Typography
                  color={theme => theme.palette.allColors.GREY10}
                  component='span'
                  fontFamily='GothamProRegular'
                >
                  Tel:
                </Typography>{' '}
                +998 99 631 42 21
              </Typography>
              <Typography
                component={Link}
                to='tel:+998996314221'
                color={theme => theme.palette.allColors.BLACK}
                sx={{ textDecoration: 'none' }}
                fontFamily='GothamProRegular'
              >
                <Typography
                  color={theme => theme.palette.allColors.GREY10}
                  component='span'
                  fontFamily='GothamProRegular'
                >
                  Email:
                </Typography>{' '}
                info@ais.uz
              </Typography>
            </Stack>
          </Stack>
        </Container>
      </Stack>
      <Stack width='100%' py='20px' bgcolor={theme => theme.palette.allColors.BRAND}>
        <Container>
          <Stack direction='row' justifyContent='space-between' width='100%' alignItems='center'>
            <Typography
              variant='subtitle1'
              color={theme => theme.palette.allColors.WHITE}
              fontFamily='GothamProRegular'
            >
              2024; Agrosanoat sohasida sug'urtalashni avtomatlashtirilgan tizimi
            </Typography>
            <Logo />
          </Stack>
        </Container>
      </Stack>
    </Stack>
  )
}

```
- - - - -

`src/components/footer/index.ts`
```ts
export { Foooter } from './footer'

```
- - - - -

`src/components/header/header.tsx`
```javascript
import { ReactComponent as Logo } from '@/assets/icons/logo.svg'
import { ROUTER } from '@/constants/router'
import { Container } from '@mui/material'
import Stack from '@mui/material/Stack'
import { Link } from 'react-router-dom'
import { Profile } from './profile'
import { getUser } from '@/utils/user'
import { useEffect, useState } from 'react'

export const Header = () => {
  const users = getUser()
  const [user, setUser] = useState<string | null>(users)

  useEffect(() => {
    const getFromStorage = async () => {
      setUser(users)
    }
    window.addEventListener('storage', getFromStorage)
    void getFromStorage()
  }, [users, user])

  return (
    <Stack
      width='100%'
      direction='row'
      alignItems='center'
      gap='16px'
      p='16px 20px'
      flexWrap='wrap'
      bgcolor={theme => theme.palette.allColors.BRAND}
      borderBottom={theme => `1px solid ${theme.palette.allColors.GREY20}`}
    >
      <Container>
        <Stack direction='row' width='100%' justifyContent='space-between' alignItems='center'>
          <Link to={ROUTER.HOME}>
            <Logo />
          </Link>
          {user && <Profile />}
        </Stack>
      </Container>
    </Stack>
  )
}

```
- - - - -

`src/components/header/index.ts`
```ts
export { Header } from './header'

```
- - - - -

`src/components/header/profile.tsx`
```javascript
import { Fragment, useState } from 'react'
import { Avatar, Button, Menu, MenuItem, Stack, Typography } from '@mui/material'
import IconUser from '@/assets/icons/user.svg'
import LogoutIcon from '@mui/icons-material/Logout'
import { COLORS } from '@/constants/css'
import { ROUTER } from '@/constants/router'

export const Profile = () => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null)
  const open = Boolean(anchorEl)

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget)
  }

  const handleClose = () => {
    setAnchorEl(null)
  }

  const handleLogout = () => {
    localStorage.clear()
    window.location.href = ROUTER.AUTH
    // navigate(ROUTER.AUTH)
    setAnchorEl(null)
  }

  return (
    <Fragment>
      <Button sx={{ backgroundColor: 'transparent !important' }} onClick={handleClick}>
        <Stack direction='row' alignItems='center' spacing={1}>
          <Avatar alt='Remy Sharp' src={IconUser} />
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: '#fff',
            }}
          >
            Username
          </Typography>
        </Stack>
      </Button>
      <Menu anchorEl={anchorEl} open={open} onClose={handleClose}>
        <MenuItem onClick={handleLogout} sx={{ color: COLORS.RED10 }}>
          <LogoutIcon color='error' /> Tizimdan chiqish
        </MenuItem>
      </Menu>
    </Fragment>
  )
}

```
- - - - -

`src/components/image/image.tsx`
```javascript
import { Conatiner } from './style'
import Box from '@mui/material/Box'
import Skeleton from '@mui/material/Skeleton'
import { useBoolean } from '@/hooks/useBoolean'
import { type Theme, type SxProps } from '@mui/material'
import { LazyLoadImage } from 'react-lazy-load-image-component'

interface ImageProps {
  alt: string
  src: string
  radius?: number | string
  sx?: SxProps<Theme> | undefined
}

export const Image = ({ sx, alt, src, radius }: ImageProps) => {
  const { value, setFalse } = useBoolean(true)

  return (
    <Conatiner sx={sx} radius={radius}>
      {value && (
        <Box className='loading'>
          <Skeleton
            width='100%'
            height='100%'
            variant='rectangular'
            sx={{ borderRadius: radius }}
          />
        </Box>
      )}
      <LazyLoadImage
        alt={alt}
        width='100%'
        effect='blur'
        height='100%'
        src={src}
        afterLoad={setFalse}
        onError={({ currentTarget }) => {
          setFalse()
          currentTarget.onerror = null
          currentTarget.src = '/default-image.webp'
        }}
      />
    </Conatiner>
  )
}

```
- - - - -

`src/components/image/index.ts`
```ts
export { Image } from './image'

```
- - - - -

`src/components/image/style.ts`
```ts
import { styled } from '@mui/material/styles'

interface ConatinerProps {
  radius?: number | string
}

export const Conatiner = styled('div')<ConatinerProps>`
  position: relative;
  border-radius: ${({ radius }) => radius} !important;
  img {
    width: 100%;
    height: 100%;
    cursor: pointer;
    object-fit: fill;
    border-radius: ${({ radius }) => radius} !important;
  }
  .loading {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 100;
    position: absolute;
  }
`

```
- - - - -

`src/components/inputs/datepicker/datepicker.tsx`
```javascript
// @ts-nocheck
import { Controller } from 'react-hook-form'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'
import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker'
import { TextField } from '@mui/material'

export const InputDate = ({ name, control }: any) => {
  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <Controller
        name={name}
        control={control}
        render={({ field }) => (
          <DesktopDatePicker
            {...field}
            renderInput={(params: any) => (
              <TextField
                {...params}
                sx={{
                  '& .MuiInputBase-root': {
                    backgroundColor: '#fff !important',
                    borderRadius: '8px',
                  },
                  '& .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#08705F !important',
                  },
                  '&:hover .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#08705F !important',
                  },
                  '& .Mui-focused .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#08705F !important',
                  },
                  fontSize: 14,
                }}
                placeholder='Select'
              />
            )}
          />
        )}
      />
    </LocalizationProvider>
  )
}

```
- - - - -

`src/components/inputs/datepicker/index.ts`
```ts
export { InputDate } from './datepicker'

```
- - - - -

`src/components/inputs/input/index.ts`
```ts
export { Input } from './input'

```
- - - - -

`src/components/inputs/input/input.tsx`
```javascript
import TextField from '@mui/material/TextField'
import { type InputProps } from '@/types/components'
import { type FieldValues, useController } from 'react-hook-form'

export const Input = <T extends FieldValues>({ label, name, control, ...props }: InputProps<T>) => {
  const {
    field: { ref, disabled, onChange, ...inputProps },
    fieldState: { invalid, error },
  } = useController({
    name,
    control,
  })

  return (
    <TextField
      {...props}
      {...inputProps}
      id={name}
      label={label}
      error={invalid}
      size='small'
      variant='outlined'
      fullWidth
      aria-readonly
      helperText={error?.message}
      value={inputProps?.value ?? ''}
      inputRef={props.inputRef ?? ref}
      InputLabelProps={{ shrink: true }}
      onChange={e => {
        onChange(e)
        if (props.onChange) {
          props.onChange(e)
        }
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-checkbox/index.ts`
```ts
export { InputCheckbox } from './input'

```
- - - - -

`src/components/inputs/input-checkbox/input.tsx`
```javascript
import { type ChangeEvent } from 'react'
import MuiCheckbox from '@mui/material/Checkbox'
import FormControl from '@mui/material/FormControl'
import FormHelperText from '@mui/material/FormHelperText'
import { type InputCheckboxProps } from '@/types/components'
import FormControlLabel from '@mui/material/FormControlLabel'
import { type FieldValues, useController } from 'react-hook-form'

export const InputCheckbox = <T extends FieldValues>({
  sx,
  name,
  label,
  control,
  onChange,
  disabled,
  labelPlacement,
  ...props
}: InputCheckboxProps<T>) => {
  const {
    fieldState: { error, invalid },
    field: { ref, ...inputProps },
  } = useController({
    name,
    control,
  })

  const errorForm = invalid || props.error
  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    const { checked } = event.target

    if (onChange) {
      onChange(event, checked)
    }

    const defaultOnChange = inputProps.onChange as (e: boolean) => void
    defaultOnChange(checked)
  }

  return (
    <FormControl
      error={errorForm}
      component='fieldset'
      sx={theme => ({
        svg: {
          g: {
            rect: {
              stroke: errorForm ? theme.palette.allColors.RED : undefined,
            },
          },
        },
        '& .MuiFormControlLabel-label': {
          fontFamily: 'GothamProRegular',
          color: 'var(--Gray)',
          fontSize: 14,
        },
      })}
    >
      <FormControlLabel
        sx={sx}
        label={label}
        disabled={disabled}
        labelPlacement={labelPlacement}
        control={
          <MuiCheckbox
            {...props}
            name={name}
            inputRef={ref}
            onChange={handleChange}
            value={inputProps.value}
            checked={inputProps.value}
          />
        }
      />
      <FormHelperText>{error?.message}</FormHelperText>
    </FormControl>
  )
}

```
- - - - -

`src/components/inputs/input-checkbox-indeterminate/index.ts`
```ts
export { InputCheckboxIndeterminate } from './input'

```
- - - - -

`src/components/inputs/input-checkbox-indeterminate/input.tsx`
```javascript
import { useRef, useEffect } from 'react'
import Checkbox, { type CheckboxProps } from '@mui/material/Checkbox'

interface HTMLButtonElementProps extends HTMLButtonElement {
  indeterminate: boolean
}

export const InputCheckboxIndeterminate = ({
  indeterminate,
  className = '',
  ...rest
}: CheckboxProps) => {
  const ref = useRef<HTMLButtonElementProps>(null)

  useEffect(() => {
    if (typeof indeterminate === 'boolean') {
      if (ref.current) ref.current.indeterminate = !rest.checked && indeterminate
    }
  }, [ref, indeterminate, rest.checked])

  return <Checkbox ref={ref} {...rest} />
}

```
- - - - -

`src/components/inputs/input-date/index.ts`
```ts
export { InputDate } from './input'

```
- - - - -

`src/components/inputs/input-date/input.tsx`
```javascript
import dayjs from 'dayjs'
import { type InputDateProps } from '@/types/components'
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'
import { type Path, Controller, type FieldValues } from 'react-hook-form'
// import { ReactComponent as IconCalendar } from '@/assets/icons/calendar.svg'

export const InputDate = <T extends FieldValues>({
  name,
  control,
  ...props
}: InputDateProps<T>) => {
  return (
    <Controller
      name={name}
      control={control}
      defaultValue={null as Path<null>}
      render={({ field, fieldState: { invalid, error } }) => {
        return (
          <DateTimePicker
            {...props}
            value={dayjs(field.value)}
            onChange={(e, context) => {
              field.onChange(e)
              if (props.onChange) {
                props.onChange(dayjs(e), context)
              }
            }}
            sx={{
              width: '100%',
            }}
            slotProps={{
              inputAdornment: {
                position: 'start',
              },
              textField: {
                error: invalid,
                helperText: error?.message,
              },
            }}
            // slots={{
            //   openPickerIcon: IconCalendar,
            // }}
          />
        )
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-mask/index.ts`
```ts
export { InputMask } from './input'

```
- - - - -

`src/components/inputs/input-mask/input.tsx`
```javascript
// @ts-nocheck
import MaskedInput from 'react-text-mask'
import TextField from '@mui/material/TextField'
import { type InputMaskProps } from '@/types/components'
import { useController, type FieldValues } from 'react-hook-form'

export const InputMask = <T extends FieldValues>({
  name,
  mask,
  pipe,
  guide,
  control,
  showMask,
  placeholderChar,
  keepCharPositions,
  ...rest
}: InputMaskProps<T>) => {
  const {
    field,
    fieldState: { error, invalid },
  } = useController({
    name,
    control,
  })

  return (
    <MaskedInput
      {...field}
      pipe={pipe}
      mask={mask}
      guide={guide}
      showMask={showMask}
      placeholderChar={placeholderChar}
      keepCharPositions={keepCharPositions}
      render={(ref, props) => {
        return (
          <TextField
            {...rest}
            {...props}
            error={invalid}
            inputRef={props.inputRef ?? ref}
            variant='outlined'
            autoComplete='off'
            size='small'
            helperText={error?.message}
            InputLabelProps={{ shrink: true }}
            onChange={e => {
              props.onChange(e)
              if (rest?.onChange) rest?.onChange(e)
            }}
          />
        )
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-password/index.ts`
```ts
export { InputPassword } from './input'

```
- - - - -

`src/components/inputs/input-password/input.tsx`
```javascript
import { Input } from '../input'
import { useBoolean } from '@/hooks/useBoolean'
import IconButton from '@mui/material/IconButton'
import { type FieldValues } from 'react-hook-form'
import InputAdornment from '@mui/material/InputAdornment'
import { type InputPasswordProps } from '@/types/components'
import RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye'
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff'

export const InputPassword = <T extends FieldValues>(props: InputPasswordProps<T>) => {
  const { value, toggle } = useBoolean()

  return (
    <Input
      {...props}
      autoComplete='current-password'
      type={value ? 'text' : 'password'}
      InputProps={{
        endAdornment: (
          <InputAdornment position='end'>
            <IconButton onClick={toggle}>
              {value ? (
                <RemoveRedEyeIcon sx={{ width: 20, height: 20 }} />
              ) : (
                <VisibilityOffIcon sx={{ width: 20, height: 20 }} />
              )}
            </IconButton>
          </InputAdornment>
        ),
        ...props.InputProps,
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-phone/index.ts`
```ts
export { InputPhone } from './input'

```
- - - - -

`src/components/inputs/input-phone/input.tsx`
```javascript
import Stack from '@mui/material/Stack'
import { InputMask } from '../input-mask'
import Typography from '@mui/material/Typography'
import { type FieldValues } from 'react-hook-form'
import { type InputPhoneProps } from '@/types/components'
import InputAdornment from '@mui/material/InputAdornment'
import { ReactComponent as IconFlagUz } from '@/assets/icons/flag-uz.svg'

export const InputPhone = <T extends FieldValues>(props: InputPhoneProps<T>) => {
  return (
    <InputMask
      {...props}
      mask={[/\d/, /\d/, ' ', /\d/, /\d/, /\d/, ' ', /\d/, /\d/, ' ', /\d/, /\d/]}
      InputProps={{
        startAdornment: (
          <InputAdornment position='start'>
            <Stack gap='10px' direction='row' alignItems='center'>
              <Stack
                alignItems='center'
                justifyContent='center'
                sx={{
                  svg: {
                    width: '26px',
                    height: '26px',
                  },
                }}
              >
                <IconFlagUz />
              </Stack>
              <Typography color={theme => theme.palette.allColors.BLACK}>+998</Typography>
            </Stack>
          </InputAdornment>
        ),
        ...props.InputProps,
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-switch/index.ts`
```ts
export { InputSwitch } from './switch'

```
- - - - -

`src/components/inputs/input-switch/switch.tsx`
```javascript
import Switch from '@mui/material/Switch'
import { type InputSwicthProps } from '@/types/components'
import FormControlLabel from '@mui/material/FormControlLabel'
import { useController, type FieldValues } from 'react-hook-form'
import { type ChangeEvent } from 'react'

export const InputSwitch = <T extends FieldValues>({
  sx,
  name,
  label,
  control,
  disabled,
  labelPlacement,
  ...props
}: InputSwicthProps<T>) => {
  const {
    field: { ref, ...inputProps },
  } = useController({
    name,
    control,
  })

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    const { checked } = event.target
    const defaultOnChange = inputProps.onChange as (e: boolean) => void
    defaultOnChange(checked)
  }

  return (
    <FormControlLabel
      sx={sx}
      label={label}
      disabled={disabled}
      labelPlacement={labelPlacement}
      control={
        <Switch
          {...props}
          name={name}
          inputRef={ref}
          onChange={handleChange}
          value={inputProps.value}
          checked={inputProps.value}
        />
      }
    />
  )
}

```
- - - - -

`src/components/inputs/input-textarea/index.ts`
```ts
export { TextArea } from './input'

```
- - - - -

`src/components/inputs/input-textarea/input.tsx`
```javascript
import TextField from '@mui/material/TextField'
import { type InputProps } from '@/types/components'
import { type FieldValues, useController } from 'react-hook-form'

export const TextArea = <T extends FieldValues>({
  label,
  name,
  control,
  ...props
}: InputProps<T>) => {
  const {
    field: { ref, disabled, onChange, ...inputProps },
    fieldState: { invalid, error },
  } = useController({
    name,
    control,
  })

  return (
    <TextField
      {...props}
      {...inputProps}
      id={name}
      label={label}
      error={invalid}
      fullWidth
      helperText={error?.message}
      value={inputProps?.value ?? ''}
      inputRef={props.inputRef ?? ref}
      InputLabelProps={{
        shrink: true,
        style: { color: '#EB5757', fontFamily: 'GothamProRegular' },
      }}
      multiline
      minRows={4}
      maxRows={16}
      sx={{
        '& .MuiInputBase-sizeSmall': {
          height: 'auto !important',
        },
        fontFamily: 'GothamProRegular !important',
      }}
      onChange={e => {
        onChange(e)
        if (props.onChange) {
          props.onChange(e)
        }
      }}
    />
  )
}

```
- - - - -

`src/components/inputs/input-textarea/style.ts`
```ts
import styled from '@emotion/styled'

export const TextArea = styled('textarea')``

```
- - - - -

`src/components/inputs/input-timepicker/index.ts`
```ts
export { InputTimePicker } from './input'

```
- - - - -

`src/components/inputs/input-timepicker/input.tsx`
```javascript
import dayjs from 'dayjs'
import { TimePicker } from '@mui/x-date-pickers/TimePicker'
import { type InputTimePickerProps } from '@/types/components'
import { Controller, type Path, type FieldValues } from 'react-hook-form'
import { ReactComponent as IconClockCircle } from '@/assets/icons/clock-circle.svg'

export const InputTimePicker = <T extends FieldValues>({
  name,
  control,
  ...props
}: InputTimePickerProps<T>) => {
  return (
    <Controller
      name={name}
      control={control}
      defaultValue={null as Path<null>}
      render={({ field, fieldState: { invalid, error } }) => {
        return (
          <TimePicker
            {...props}
            value={dayjs(field.value)}
            onChange={(e, context) => {
              field.onChange(e)
              if (props.onChange) {
                props.onChange(dayjs(e), context)
              }
            }}
            ampm={false}
            sx={{ width: '100%' }}
            slotProps={{
              inputAdornment: {
                position: 'start',
              },
              textField: {
                error: invalid,
                helperText: error?.message,
              },
            }}
            slots={{
              openPickerIcon: IconClockCircle,
            }}
          />
        )
      }}
    />
  )
}

```
- - - - -

`src/components/loading-overlay/index.ts`
```ts
export { LoadingOverlay } from './loading'

```
- - - - -

`src/components/loading-overlay/loading.tsx`
```javascript
import { Backdrop, CircularProgress } from '@mui/material'

interface ILoadingOverlay {
  isLoading: boolean
}

export const LoadingOverlay = ({ isLoading }: ILoadingOverlay) => {
  return (
    <Backdrop sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }} open={isLoading}>
      <CircularProgress color='inherit' />
    </Backdrop>
  )
}

```
- - - - -

`src/components/map/index.ts`
```ts
export { Map } from './map'

```
- - - - -

`src/components/map/map.tsx`
```javascript
import 'leaflet/dist/leaflet.css'
import { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'

export const Map = () => {
  return (
    <MapContainer
      center={[51.505, -0.09]}
      zoom={13}
      scrollWheelZoom={false}
      style={{ width: '100%', height: 300 }}
    >
      <TileLayer
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
      />
      <Marker position={[51.505, -0.09]}>
        <Popup>
          A pretty CSS3 popup. <br /> Easily customizable.
        </Popup>
      </Marker>
    </MapContainer>
  )
}

```
- - - - -

`src/components/modal/index.ts`
```ts
export { CustomModal } from './modal'

```
- - - - -

`src/components/modal/modal.tsx`
```javascript
import Dialog from '@mui/material/Dialog'
import DialogContent from '@mui/material/DialogContent'
import DialogTitle from '@mui/material/DialogTitle'
import useMediaQuery from '@mui/material/useMediaQuery'
import { useTheme } from '@mui/material/styles'
import { type IModal } from '@/types/modal'

export const CustomModal = ({
  open,
  setOpen,
  title,
  children,
  maxWidth = 'lg',
  fullScreen: fullscreen = true,
}: IModal) => {
  const theme = useTheme()
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'))

  const handleClose = () => {
    setOpen(false)
  }

  return (
    <Dialog
      fullWidth
      maxWidth={maxWidth}
      fullScreen={!fullscreen ? false : fullScreen}
      open={open}
      onClose={handleClose}
      aria-labelledby='responsive-dialog-title'
    >
      <DialogTitle
        id='responsive-dialog-title'
        sx={{ fontFamily: 'GothamProRegular', fontSize: 16, color: 'var(--dark)' }}
      >
        {title}
      </DialogTitle>
      <DialogContent>{children}</DialogContent>
    </Dialog>
  )
}

```
- - - - -

`src/components/pagination/index.ts`
```ts
export { CustomPagination } from './pagination'

```
- - - - -

`src/components/pagination/pagination.tsx`
```javascript
/* eslint-disable react-hooks/exhaustive-deps */
// @ts-nocheck
import Stack from '@mui/material/Stack'
import Pagination from '@mui/material/Pagination'
import { Typography } from '@mui/material'
import { type ICustomPagination } from '@/types/pagination'
import { useEffect } from 'react'
import { useNavigate } from 'react-router-dom'

export const CustomPagination = ({ params, setParams, count = 0 }: ICustomPagination) => {
  const navigate = useNavigate()

  useEffect(() => {
    const queryParams: string = '?page=' + params.page + '&limit=' + params.limit
    navigate({
      pathname: location.pathname,
      search: queryParams,
    })
  }, [params])

  const handlePageChange = (event: React.ChangeEvent<unknown>, page: number) => {
    setParams({
      page,
      limit: 10,
    })
  }
  return (
    <Stack
      width='100%'
      display='flex'
      justifyContent='center'
      alignItems='center'
      direction='row'
      spacing={3}
    >
      <Pagination
        count={Math.ceil(count / params.limit)}
        variant='outlined'
        shape='rounded'
        page={params.page}
        onChange={handlePageChange}
        sx={{
          '& .MuiPaginationItem-root': {
            width: 32,
            height: 32,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontFamily: 'GothamProRegular',
            fontSize: '14px',
            color: '#272937',
            borderRadius: '4px !important',
            border: '1px solid #EDEDED',
            lineHeight: 'normal',
          },
        }}
      />
      <Typography
        sx={{
          color: 'var(--Gray)',
          fontFamily: 'GothamProRegular',
          fontSize: 14,
        }}
      >
        Barchasi: {count} ta
      </Typography>
    </Stack>
  )
}

```
- - - - -

`src/components/radio/index.ts`
```ts
export { CustomRadioGroup } from './radio'

```
- - - - -

`src/components/radio/radio.tsx`
```javascript
import Radio from '@mui/material/Radio'
import RadioGroup from '@mui/material/RadioGroup'
import FormControl from '@mui/material/FormControl'
import FormControlLabel from '@mui/material/FormControlLabel'
import { Typography } from '@mui/material'

interface IOptions {
  value: string
  label: string
}
interface ICustomRadioProps {
  options: IOptions[]
}

export const CustomRadioGroup = ({ options = [] }: ICustomRadioProps) => {
  return (
    <FormControl>
      <RadioGroup row>
        {options.map((v, i: number) => {
          return (
            <FormControlLabel
              key={i}
              value={v?.value}
              control={<Radio />}
              label={
                <Typography
                  variant='body1'
                  style={{ fontFamily: 'GothamProRegular', fontSize: 14 }}
                >
                  {v?.label}
                </Typography>
              }
              labelPlacement='start'
              style={{ fontFamily: 'GothamProRegular !important' }}
            />
          )
        })}
      </RadioGroup>
    </FormControl>
  )
}

```
- - - - -

`src/components/select/index.ts`
```ts
export { SelectInput } from './select'

```
- - - - -

`src/components/select/select.tsx`
```javascript
// @ts-nocheck
import Select from '@mui/material/Select'
import MenuItem from '@mui/material/MenuItem'
import FormHelperText from '@mui/material/FormHelperText'
import FormControl from '@mui/material/FormControl'
import InputLabel from '@mui/material/InputLabel'
import { useController, type FieldValues } from 'react-hook-form'
import { type InputProps } from '@/types/components'
import { COLORS } from '@/constants/css'

export const SelectInput = <T extends FieldValues>({
  label,
  name,
  control,
  options,
  ...props
}: InputProps<T> & { options: Array<{ label: string; value: string | number }> }) => {
  const {
    field: { onChange, ref, value, ...inputProps },
    fieldState: { invalid, error },
  } = useController({
    name,
    control,
  })

  return (
    <FormControl fullWidth size='small' error={invalid}>
      <InputLabel id={`${name}-label`}>{label}</InputLabel>
      <Select
        {...props}
        {...inputProps}
        id={name}
        labelId={`${name}-label`}
        value={value ?? ''}
        inputRef={ref}
        onChange={e => {
          onChange(e)
          if (props.onChange) {
            props.onChange(e)
          }
        }}
        placeholder='Select'
        MenuProps={{
          PaperProps: {
            sx: {
              borderRadius: '10px',
              marginTop: '8px',
              boxShadow: 'none',
              border: `1px solid ${COLORS.GREY}`,
              fontFamily: 'GothamProRegular',
            },
          },
        }}
      >
        {options.map(option => (
          <MenuItem key={option.value} value={option.value}>
            {option.label}
          </MenuItem>
        ))}
      </Select>
      {error?.message && <FormHelperText>{error.message}</FormHelperText>}
    </FormControl>
  )
}

```
- - - - -

`src/components/spinner/index.ts`
```ts
export { Spinner } from './spinner'

```
- - - - -

`src/components/spinner/spinner.tsx`
```javascript
import Box from '@mui/material/Box'
import CircularProgress, { type CircularProgressProps } from '@mui/material/CircularProgress'

export interface PropTypes extends CircularProgressProps {
  center?: boolean
}

export const Spinner = ({ center, ...rest }: PropTypes) => (
  <Box
    sx={
      center
        ? {
            width: '100%',
            height: '50vh',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            ...rest.sx,
          }
        : rest.sx
    }
  >
    <CircularProgress {...rest} />
  </Box>
)

```
- - - - -

`src/components/suspense/index.ts`
```ts
export { Suspense } from './suspense'

```
- - - - -

`src/components/suspense/suspense.tsx`
```javascript
import { Spinner } from '@/components/spinner'
import { Suspense as ReactSuspense, type ReactNode } from 'react'

interface ISuspense {
  children: ReactNode
}

export const Suspense = ({ children }: ISuspense) => (
  <ReactSuspense fallback={<Spinner center />}>{children}</ReactSuspense>
)

```
- - - - -

`src/components/table/index.ts`
```ts
export { CustomTable } from './table'

```
- - - - -

`src/components/table/style.ts`
```ts
import styled from '@emotion/styled'

export const TableWrapper = styled('div')`
  width: 100%;
  overflow-x: auto;
`

export const Table = styled('table')`
  width: 100%;
  border-collapse: collapse;
  thead {
    tr {
      padding: 8px;
      th {
        color: var(--Gray);
        font-variant-numeric: lining-nums tabular-nums;
        font-family: 'GothamProRegular';
        font-size: 14px;
        font-style: normal;
        line-height: 20px;
        padding: 8px;
        text-align: left;
      }
    }
  }
  tbody {
    tr {
      padding: 8px;
      border-radius: 4px;
      &:nth-of-type(2n + 1) {
        background-color: var(--Gray-1);
      }
      td {
        padding: 8px;
        color: var(--dark);
        font-variant-numeric: lining-nums tabular-nums;
        font-family: 'GothamProRegular';
        font-size: 14px;
        font-style: normal;
        line-height: 20px;
        max-width: 250px;
      }
    }
  }
`

```
- - - - -

`src/components/table/table.tsx`
```javascript
import {
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from '@tanstack/react-table'
import { Table, TableWrapper } from './style'
import { type TableProps } from '@/types/table'

export const CustomTable = <T extends object>({ options, emptyTitle }: TableProps<T>) => {
  const table = useReactTable({
    ...options,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <TableWrapper>
      <Table>
        <thead>
          {table.getHeaderGroups().map(headerGroup => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map(header => (
                <th key={header.id}>
                  {header.isPlaceholder
                    ? null
                    : flexRender(header.column.columnDef.header, header.getContext())}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody>
          {options.data.length === 0 ? (
            <tr>
              <td colSpan={options.columns.length} style={{ textAlign: 'center' }}>
                {emptyTitle}
              </td>
            </tr>
          ) : (
            table.getRowModel().rows.map(row => (
              <tr key={row.id}>
                {row.getVisibleCells().map(cell => (
                  <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>
                ))}
              </tr>
            ))
          )}
        </tbody>
      </Table>
    </TableWrapper>
  )
}

```
- - - - -

`src/configs/material.tsx`
```javascript
import { COLORS, BREAKPOINTS, LIGHT_COLORS, DARK_COLORS } from '@/constants/css'
import {
  type ColorSystemOptions,
  type SupportedColorScheme,
  experimental_extendTheme as extendTheme,
} from '@mui/material/styles'

declare module '@mui/material/styles' {
  interface Palette {
    allColors: typeof COLORS
    colors: typeof LIGHT_COLORS
  }

  interface PaletteOptions {
    allColors: typeof COLORS
    colors: typeof LIGHT_COLORS
  }
}

declare module '@mui/material/IconButton' {
  interface IconButtonOwnProps {
    radius?: string | number
  }
}

const colorSchemes: Partial<Record<SupportedColorScheme, ColorSystemOptions>> | undefined = {
  light: {
    palette: {
      allColors: COLORS,
      colors: LIGHT_COLORS,
      primary: {
        main: COLORS.BRAND,
      },
      text: {
        primary: COLORS.BLACK,
      },
      error: {
        light: COLORS.RED,
        main: COLORS.RED,
        dark: COLORS.RED,
      },
    },
  },
  dark: {
    palette: {
      allColors: COLORS,
      colors: DARK_COLORS,
      primary: {
        main: COLORS.BRAND,
      },
      text: {
        primary: COLORS.BLACK,
      },
      error: {
        light: COLORS.RED,
        main: COLORS.RED,
        dark: COLORS.RED,
      },
    },
  },
}

export const theme = extendTheme({
  colorSchemes,
  breakpoints: BREAKPOINTS,
  shape: {
    borderRadius: 8,
  },

  components: {
    MuiButton: {
      defaultProps: {
        variant: 'contained',
      },
      styleOverrides: {
        sizeLarge: {
          height: 60,
          fontSize: '20px',
          letterSpacing: '-0.8px',
          padding: '0 20px',
        },
        sizeMedium: {
          height: 50,
          fontSize: '18px',
          letterSpacing: '-0.6px',
        },
        sizeSmall: {
          height: 40,
          gap: '6px',
        },

        root: ({ theme }) => ({
          fontWeight: 500,
          fontSize: '16px',
          boxShadow: 'none',
          whiteSpace: 'nowrap',
          textAlign: 'center',
          borderRadius: '10px',
          textTransform: 'inherit',
          padding: '0 16px',
          gap: '10px',
          ':hover': {
            boxShadow: 'none',
          },
        }),
      },
      variants: [
        {
          props: { variant: 'contained' },
          style: ({ theme }) => ({
            fontFamily: 'GothamProRegular',
            fontSize: 14,
            height: 44,
            minWidth: 150,
            '&.MuiLoadingButton-loading.Mui-disabled': {
              background: `${theme.palette.allColors.BRAND} !important`,
              '.MuiLoadingButton-loadingIndicator': {
                color: `${theme.palette.allColors.WHITE}`,
              },
            },
          }),
        },
        {
          props: { variant: 'outlined' },
          style: ({ theme }) => ({
            borderColor: `${theme.palette.allColors.GREY20} !important`,
            fontFamily: 'GothamProRegular',
            fontSize: 14,
            height: 44,
            minWidth: 150,
            '&.MuiLoadingButton-loading.Mui-disabled': {
              background: `${theme.palette.allColors.TRANSPARENT} !important`,
              '.MuiLoadingButton-loadingIndicator': {
                color: `${theme.palette.allColors.BRAND}`,
              },
            },
          }),
        },
      ],
    },

    MuiFormControl: {
      styleOverrides: {
        root: {
          ':has(label.MuiInputLabel-root)': {
            marginTop: '25px  !important',
          },
        },
      },
    },
    MuiInputBase: {
      defaultProps: {
        size: 'small',
      },
      styleOverrides: {
        root: ({ theme }) => ({
          height: 'auto',
          borderRadius: '8px !important',
          // backgroundColor: theme.palette.allColors.TRANSPARENT,
          backgroundColor: theme.palette.allColors.GREY,

          '&.MuiInputBase-sizeSmall': {
            height: '44px',
          },
          // 'input:-webkit-autofill,input:-webkit-autofill:hover,input:-webkit-autofill:focus,input:-webkit-autofill:active':
          //   {
          //     fontWeight: 500,
          //     fontSize: '14px',
          //     borderRadius: '0 8px 8px 0',
          //     WebkitTextFillColor: `${theme.palette.allColors.TRANSPARENT} !important`,
          //     WebkitBoxShadow: `0 0 0 30px ${theme.palette.allColors.TRANSPARENT} inset !important`,
          //     boxShadow: `0 0 0 30px ${theme.palette.allColors.TRANSPARENT} inset !important`,
          //     backgroundColor: theme.palette.allColors.TRANSPARENT,
          //   },
          ':has(.MuiInputAdornment-positionStart)': {
            paddingLeft: '20px !important',
            input: {
              paddingLeft: '0 !important',
            },
          },
          ':has(.MuiInputAdornment-positionEnd)': {
            paddingRight: '8px !important',
            input: {
              paddingRight: '0 !important',
            },
          },
          fieldset: {
            legend: {
              display: 'none',
            },
          },
          input: {
            height: 50,
            padding: '0 16px !important',
            fontSize: '14px',
            fontFamily: 'GothamProRegular',
            color: `${theme.palette.allColors.BLACK} !important`,
          },
        }),
      },
    },

    MuiInputLabel: {
      styleOverrides: {
        root: {
          transform: 'translate(0, -25px) scale(1)',
          fontFamily: 'GothamProRegular',
          fontSize: 14,
        },
      },
    },
    MuiFormHelperText: {
      styleOverrides: {
        root: ({ theme }) => ({
          marginLeft: 0,
          fontSize: '12px',
          fontWeight: 400,
          fontFamily: 'GothamProRegular',
          color: theme.palette.allColors.RED,
        }),
      },
    },
    MuiOutlinedInput: {
      styleOverrides: {
        root: ({ theme }) => ({
          borderRadius: '8px',
          '&.MuiInputBase-sizeSmall': {
            borderRadius: '5px',
          },
          '& fieldset': {
            top: 0,
            borderWidth: '1px',
            borderColor: theme.palette.allColors.GREY,
          },
          '&:hover .MuiOutlinedInput-notchedOutline': {
            borderColor: `${theme.palette.allColors.BRAND} !important`,
          },
          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
            borderWidth: '1px',
            // borderColor: `${theme.palette.allColors.BRAND} !important`,
          },
          '&.Mui-error .MuiOutlinedInput-notchedOutline': {
            borderWidth: '1px',
            borderColor: `${theme.palette.allColors.RED} !important`,
          },
        }),
      },
    },

    MuiSelect: {
      defaultProps: {
        MenuProps: {
          style: { zIndex: 9500 },
        },
      },
    },

    MuiMenu: {
      styleOverrides: {
        paper: ({ theme }) => ({
          marginTop: '8px',
          borderRadius: '10px',
          background: theme.palette.allColors.WHITE,
          border: `1px solid ${theme.palette.allColors.GREY}`,
          boxShadow: 'none',
        }),
      },
    },
    MuiMenuItem: {
      styleOverrides: {
        root: ({ theme }) => ({
          fontWeight: 500,
          fontSize: '14px',
          padding: '8px 14px',
          lineHeight: 'normal',
          fontFamily: 'GothamProRegular',
          textAlign: 'center',
          color: theme.palette.allColors.BRAND,
          '.description': {
            opacity: 0.75,
            fontWeight: 400,
          },
        }),
      },
    },

    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },

    MuiSwipeableDrawer: {
      defaultProps: {
        sx: {
          zIndex: 9000,
        },
        ModalProps: {
          keepMounted: false,
        },
        BackdropProps: {
          sx: theme => ({
            backgroundColor: theme.palette.allColors.BLACK20,
          }),
        },
        PaperProps: {
          sx: theme => ({
            backgroundImage: 'none',
            boxShadow: 'none',
            '&.MuiDrawer-paperAnchorBottom': {
              backgroundColor: theme.palette.allColors.TRANSPARENT,
              paddingTop: '14px',
            },
          }),
        },
      },
    },

    MuiDialog: {
      styleOverrides: {
        root: {
          zIndex: 1000,
        },
      },
      defaultProps: {
        PaperProps: {
          sx: () => ({
            borderRadius: '16px',
            backgroundImage: 'none',
            boxShadow: 'none',
          }),
        },
        BackdropProps: {
          sx: theme => ({
            backgroundColor: theme.palette.allColors.BLACK20,
          }),
        },
      },
    },
  },
})

```
- - - - -

`src/configs/react-query.ts`
```ts
import { type ErrorProps } from '@/types/error'
import { QueryCache, QueryClient, MutationCache } from '@tanstack/react-query'

const mutationCache = new MutationCache({
  onError: res => {
    const error = res as ErrorProps
    console.log(error)
  },
})

const queryCache = new QueryCache({
  onError: res => {
    const error = res as ErrorProps
    console.log(error, 'errr')
    if (error?.response?.status === 401) {
      window.location.href = '/'
    }
  },
})

export const queryClient = new QueryClient({
  queryCache,
  mutationCache,
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry(failureCount, res) {
        const error = res as ErrorProps
        if (error.status === 404) return false
        if (failureCount < 1) return true
        return false
      },
    },
  },
})

```
- - - - -

`src/configs/requests.ts`
```ts
import { type ErrorProps } from '@/types/error'
import { getUser } from '@/utils/user'
import axios, { type AxiosHeaders } from 'axios'
const baseURL = import.meta.env.VITE_API_BASE_URL || 'https://agro.semurgins.uz/api/'

export const request = axios.create({
  baseURL,
})
request.interceptors.request.use(
  async config => {
    const user = getUser()
    if (user) {
      ;(config.headers as AxiosHeaders).set('Authorization', `Bearer ${user}`)
      return config
    }
    return config
  },
  async error => {
    return await Promise.reject(error)
  },
)

request.interceptors.response.use(
  response => {
    return response
  },
  async (error: ErrorProps) => {
    return await Promise.reject(error)
  },
)

```
- - - - -

`src/configs/zustand.ts`
```ts
import { create as _create, type StoreApi, type UseBoundStore, type StateCreator } from 'zustand'

const resetters: Array<() => void> = []

export const create = <TState>(
  createState: StateCreator<TState> | StoreApi<TState>,
): UseBoundStore<StoreApi<TState>> => {
  const slice: UseBoundStore<StoreApi<TState>> = _create(createState as never)
  const initialState = slice.getState()
  resetters.push(() => {
    slice.setState(initialState, true)
  })

  return slice
}

export const resetAllSlices = () => {
  for (const resetter of resetters) {
    resetter()
  }
}

```
- - - - -

`src/constants/css.ts`
```ts
export const COLORS = {
  TRANSPARENT: 'transparent',
  WHITE: '#FFF',
  RED: '#EB5757',
  RED10: '#bb3c4c',
  BRAND: '#004646',
  BLACK: '#1B2149',
  BLACK10: '#00000026',
  BLACK20: '#0000008c',
  GREY: '#F5F5F5',
  GREY10: '#60676D',
  GREY20: '#E2E3E6',
}

export const LIGHT_COLORS = {}

export const DARK_COLORS: typeof LIGHT_COLORS = {}

export const BREAKPOINTS = {
  values: {
    xs: 0,
    sm: 600,
    md: 1100,
    lg: 1200,
    xl: 1536,
  },
}

```
- - - - -

`src/constants/filter.ts`
```ts
export const filter = [
  {
    value: 'apply_status',
    label: 'Ariza statusi',
  },
  {
    value: 'company_name',
    label: 'Korxona nomi',
  },
  {
    value: 'region',
    label: 'Viloyat',
  },
  {
    value: 'district',
    label: 'Tuman',
  },
  {
    value: 'type',
    // eslint-disable-next-line quotes
    label: "Sug'urta turi",
  },
  {
    value: 'apply_date',
    label: 'Ariza sanasi',
  },
]

```
- - - - -

`src/constants/format.ts`
```ts
export const DATE_FORMAT = 'DD.MM.YYYY'

```
- - - - -

`src/constants/header.ts`
```ts
import { ROUTER } from './router'

export const HEADER = [{ id: 1, name: 'Bosh sahifa', path: ROUTER.AUTH }]

```
- - - - -

`src/constants/location.ts`
```ts
interface ILocartionProps {
  path: string
  name: string
}
export const location: ILocartionProps[] = [
  {
    path: 'main',
    name: 'Bosh sahifa',
  },
  {
    path: 'auth',
    name: 'Login',
  },
  {
    path: 'register',
    name: 'Ro`yxatdan o`tish',
  },
  {
    path: 'code',
    name: 'Kodni kiritish',
  },
  {
    path: 'personal-information',
    name: 'Shaxsiy ma`lumotlar',
  },
  {
    path: 'apply',
    name: 'Arizalar',
  },
  {
    path: 'contracts',
    name: 'Shartnomalar',
  },
  {
    path: 'coverage-insurance',
    name: 'Kreditni qoplash sug’urtasi',
  },
  {
    path: 'crop-insurance',
    name: 'Xosil sug’urtasi bo’yicha arizalar',
  },
  {
    path: 'create',
    name: 'Ariza yaratish',
  },
  {
    path: 'edit',
    name: 'Arizani ko`rish',
  },
  {
    path: 'land-areas',
    name: 'Yer maydonlari',
  },
  {
    path: 'payment-status',
    name: 'To`lov holati',
  },
  {
    path: 'documents',
    name: 'Hisobotlar',
  },
  {
    path: 'technical-support',
    name: 'Texnik yordam',
  },
  {
    path: 'video-instruction',
    name: 'Video qo`llanma',
  },
]

```
- - - - -

`src/constants/react-query-keys.ts`
```ts
export const REACT_QUERY_KEYS = {
  GET_MAP_DATA: 'get-map-data',
  GET_ALL_APPLICATIONS: 'GET_ALL_APPLICATIONS',
  GET_BY_ID_APPLICATIONS: 'GET_BY_ID_APPLICATIONS',
  GET_ALL_CONTRACTS: 'GET_ALL_CONTRACTS',
  GET_NDVI_WITH_CONTOUR: 'GET_NDVI_WITH_CONTOUR',
}

```
- - - - -

`src/constants/router.ts`
```ts
export const ROUTER = {
  AUTH: '/',
  HOME: '/main',
  NOT_FOUND: '*',
  APPLY: 'apply',
  CONTRACTS: 'contracts',
  COVERAGE_INSURANCE: 'coverage-insurance',
  CROP_INSURANCE: 'crop-insurance',
  CREATE: 'create',
  PAYMENT_STATUS: 'payment-status',
  DOCUMENTS: 'documents',
  POLIS: 'polis',
  TECHNICAL_SUPPORT: 'technical-support',
  LAND_AREAS: 'land-areas',
  FORM_CONTRACT: 'form-contract',
}

```
- - - - -

`src/constants/status.ts`
```ts
export const status = {
  success: 'success',
  in_progress: 'in_progress',
  canceled: 'canceled',
}

```
- - - - -

`src/hooks/useBoolean.ts`
```ts
import { useState, useCallback, type Dispatch, type SetStateAction } from 'react'

interface UseBooleanOutput {
  value: boolean
  setTrue: () => void
  setFalse: () => void
  toggle: () => void
  setValue: Dispatch<SetStateAction<boolean>>
}

interface OptionProps {
  onTrue: () => void
  onFalse: () => void
  onToggle: () => void
}

export const useBoolean = (
  defaultValue: boolean | undefined = false,
  { onTrue, onFalse, onToggle }: Partial<OptionProps> = {},
): UseBooleanOutput => {
  const [value, setValue] = useState(!!defaultValue)

  const setTrue = useCallback(() => {
    setValue(true)
    if (onTrue) onTrue()
  }, [onTrue])
  const setFalse = useCallback(() => {
    setValue(false)
    if (onFalse) onFalse()
  }, [onFalse])
  const toggle = useCallback(() => {
    setValue(x => !x)
    if (onToggle) onToggle()
  }, [onToggle])

  return { value, setValue, setTrue, setFalse, toggle }
}

```
- - - - -

`src/hooks/useDebounce.ts`
```ts
import { useState, useEffect } from 'react'

export function useDebounce<T>(value: T, delay?: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value)

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value)
    }, delay || 500)

    return () => {
      clearTimeout(timer)
    }
  }, [value, delay])

  return debouncedValue
}

```
- - - - -

`src/hooks/useTimer.ts`
```ts
import dayjs from 'dayjs'
import { useCallback, useEffect, useLayoutEffect, useState } from 'react'

interface TimerProps {
  time: string
  minute: number
}

export const useTimer = ({ time, minute }: TimerProps) => {
  const [timeInSeconds, setTimeInSeconds] = useState(0)
  const [timerData, setTimerData] = useState('MM:SS')

  const handleReset = useCallback(() => {
    const expireTime = dayjs(time).add(minute, 'minute')
    const defaultRemainingTime = expireTime.diff(dayjs(), 'second')
    setTimeInSeconds(defaultRemainingTime >= 0 ? defaultRemainingTime : 0)
  }, [time, minute])

  useLayoutEffect(() => {
    const expireTime = dayjs(time).add(minute, 'minute')
    const defaultRemainingTime = expireTime.diff(dayjs(), 'second')
    setTimeInSeconds(defaultRemainingTime >= 0 ? defaultRemainingTime : 0)
  }, [time, minute])

  const secondsToMS = useCallback((seconds: number) => {
    const m = Math.floor((seconds % 3600) / 60)
    const s = Math.floor((seconds % 3600) % 60)

    const mDisplay = m > 0 ? String(m).padStart(2, '0') : '00'
    const sDisplay = s > 0 ? String(s).padStart(2, '0') : '00'

    return mDisplay + ':' + sDisplay
  }, [])

  useEffect(() => {
    setTimerData(secondsToMS(timeInSeconds))
    const intervalId = setInterval(() => {
      if (timeInSeconds <= 0) {
        clearInterval(intervalId)
        return 0
      } else {
        setTimeInSeconds(prevState => prevState - 1)
      }
    }, 1000)

    return () => {
      clearInterval(intervalId)
    }
  }, [secondsToMS, timeInSeconds])

  const isTimeInSeconds = timeInSeconds > 0

  return { timerData, handleReset, timeInSeconds, isTimeInSeconds }
}

```
- - - - -

`src/index.css`
```css
:root {
  --Gray: #60676d;
  --dark: #313131;
  --Gray-1: #f5f5f5;
  --t-border: #e7e7e7;
  --Green: #08705f;
  --main-white: #fff;
}
@font-face {
  font-family: 'GothamProLight';
  src: url('./assets/fonts/GothaProLig.otf');
}
@font-face {
  font-family: 'GothamProRegular';
  src: url('./assets/fonts/GothaProReg.otf');
}
@font-face {
  font-family: 'GothamProMedium';
  src: url('./assets/fonts/GothaProMed.otf');
}
@font-face {
  font-family: 'GothamProBold';
  src: url('./assets/fonts/GothaProBol.otf');
}

.custom-marker {
  background-color: black;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  border: 2px solid #fff;
  font-weight: bold;
  color: #fff;
  width: 28px !important;
  height: 28px !important;
}
.custom-marker.finish {
  background-color: rgb(255, 255, 255);
  border-color: #000000;
  color: #000000;
}

.custom-marker.p {
  background-color: rgb(0, 115, 255);
  border: 1px solid #000000;
  color: #ffffff;
  font-weight: normal;
  width: 20px !important;
  height: 20px !important;
}
.leaflet-bar {
  border: none !important;
  border-radius: 8px;
  font-size: 10px;
}

.leaflet-control-zoom-in {
  border-top-left-radius: 8px !important;
  border-top-right-radius: 8px !important;
}
.leaflet-control-zoom-out {
  border-bottom-left-radius: 8px !important;
  border-bottom-right-radius: 8px !important;
}
.leaflet-draw-toolbar a {
  border-radius: 8px !important;
}
.leaflet-editing-icon {
  margin-left: -5px !important;
  margin-top: -5px !important;
  width: 10px !important;
  height: 10px !important;
  border-radius: 50%;
  background-color: #000;
  border: 1px solid #fff;
}

input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
input:-webkit-autofill:active {
  transition: background-color 5000s ease-in-out 0s;
  -webkit-text-fill-color: #000 !important;
}

button:disabled {
  color: #fff !important;
  opacity: 0.5;
}

fieldset {
  border: none !important;
}

.contour-numbers label {
  font-family: GothamProRegular;
  font-size: 14px;
  color: rgba(0, 0, 0, 0.6);
}

.contour-numbers button {
  border: none;
  outline: none;
  cursor: pointer;
  height: 42px;
  min-width: 100px;
  border-radius: 6px;
  background-color: #f5f5f5;
  font-family: GothamProRegular;
  font-size: 14px;
  color: #1b2149;
}

.MuiPaginationItem-root svg {
  fill: #000;
}

.info.legend {
  background: white;
  padding: 8px;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  font-size: 12px;
  font-family: 'GothamProRegular', sans-serif;
}

```
- - - - -

`src/layout/hoc.tsx`
```javascript
import { type HocProps } from '@/types/hoc'
import { Suspense } from '@/components/suspense'

export const Hoc = ({ children }: HocProps) => {
  return <Suspense>{children}</Suspense>
}

```
- - - - -

`src/layout/index.ts`
```ts
export { default } from './layout'

```
- - - - -

`src/layout/layout.tsx`
```javascript
// @ts-nocheck
import { Suspense } from '@/components/suspense'
import { Header } from '@/components/header'
import { Container, Stack } from '@mui/material'
import { Foooter } from '@/components/footer'
import { Outlet } from 'react-router-dom'
import ErrorBoundary from '@/pages/500'
import { Hoc } from './hoc'

const Layout = () => {
  return (
    <ErrorBoundary>
      <Hoc>
        <Header />
        <Stack
          pt='32px'
          pb='48px'
          component='main'
          minHeight='calc(100vh - 390px)'
          sx={{ backgroundColor: theme => theme.palette.allColors.GREY }}
        >
          <Container>
            <Suspense>
              <Outlet />
            </Suspense>
          </Container>
        </Stack>
        <Foooter />
      </Hoc>
    </ErrorBoundary>
  )
}

export default Layout

```
- - - - -

`src/main.tsx`
```javascript
import ReactDOM from 'react-dom/client'
import { QueryClientProvider } from '@tanstack/react-query'
import { CssBaseline } from '@mui/material'
import { RouterProvider } from 'react-router-dom'
import { Experimental_CssVarsProvider as CssVarsProvider } from '@mui/material/styles'
import { router } from './router'
import { queryClient } from './configs/react-query'
import { theme } from './configs/material'
import { Suspense } from './components/suspense'
import { Toaster } from 'react-hot-toast'
import 'leaflet/dist/leaflet.css'
import './index.css'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <Suspense>
    <QueryClientProvider client={queryClient}>
      <CssVarsProvider theme={theme}>
        <CssBaseline />
        <RouterProvider router={router} />
        <Toaster position='top-right' reverseOrder={false} />
      </CssVarsProvider>
    </QueryClientProvider>
  </Suspense>,
)

```
- - - - -

`src/pages/404/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/404/page.tsx`
```javascript
import Stack from '@mui/material/Stack'
import Button from '@mui/material/Button'
import Typography from '@mui/material/Typography'
import { ReactComponent as Icon404Light } from '@/assets/icons/404-light.svg'
import { Link } from 'react-router-dom'
import { ROUTER } from '@/constants/router'

const Page = () => {
  return (
    <Stack
      p='20px'
      height='100vh'
      direction='column'
      width='100vw'
      alignItems='center'
      justifyContent='center'
    >
      <Stack
        mb='60px'
        sx={{
          svg: {
            width: '100%',
            height: '100%',
          },
        }}
      >
        <Icon404Light />
      </Stack>
      <Typography component='h2'>Page Not Found</Typography>
      <Typography align='center' p='12px 0 30px' maxWidth='418px'>
        Oops, something went wrong. We couldn’t find the page you are looking for
      </Typography>
      <Button
        sx={theme => ({ color: theme.palette.allColors.WHITE + ' !important' })}
        LinkComponent={Link}
        href={ROUTER.HOME}
        variant='contained'
      >
        Back to home
      </Button>
    </Stack>
  )
}

export default Page

```
- - - - -

`src/pages/500/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/500/page.tsx`
```javascript
import Stack from '@mui/material/Stack'
import Button from '@mui/material/Button'
import { type HocProps } from '@/types/hoc'
import Typography from '@mui/material/Typography'
import { QueryErrorResetBoundary } from '@tanstack/react-query'
import { ErrorBoundary as ClassBoundary } from 'react-error-boundary'

const ErrorBoundary = ({ children }: HocProps) => {
  return (
    <QueryErrorResetBoundary>
      {({ reset }) => (
        <ClassBoundary
          onReset={reset}
          fallbackRender={({ resetErrorBoundary }) => (
            <Stack p='50px' height='100%' alignItems='center' justifyContent='center'>
              <Typography>Oops! Something went wrong!</Typography>
              <Typography>
                We’re sorry, but seems there’s been a hiccup on our end. Our team has been notified
                and is working diligently to resolve this issue.
              </Typography>
              <Button fullWidth sx={{ maxWidth: '146px' }} onClick={resetErrorBoundary}>
                Try again
              </Button>
            </Stack>
          )}
        >
          {children}
        </ClassBoundary>
      )}
    </QueryErrorResetBoundary>
  )
}

export default ErrorBoundary

```
- - - - -

`src/pages/auth/form.schema.ts`
```ts
import * as yup from 'yup'

export const formSchema = yup.object().shape({
  login: yup.string().required('Ushbu maydon to`ldirilishi shart!'),
  password: yup.string().required('Ushbu maydon to`ldirilishi shart!'),
})

```
- - - - -

`src/pages/auth/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/auth/page.tsx`
```javascript
import { Button, Typography } from '@mui/material'
import Stack from '@mui/material/Stack'
import { ReactComponent as Logogreeen } from '@/assets/icons/logo-green.svg'
import { Form, Navigate } from 'react-router-dom'
import { Input } from '@/components/inputs/input'
import { InputPassword } from '@/components/inputs/input-password'
import { useLogin } from './useLogin'
import { LoadingOverlay } from '@/components/loading-overlay'
import { ROUTER } from '@/constants/router'

const Auth = () => {
  const user = localStorage.getItem('token')
  const { form, onLogin, isLoading } = useLogin()

  if (user) {
    return <Navigate to={ROUTER.HOME} />
  }

  return (
    <Form onSubmit={form.handleSubmit(onLogin)}>
      <Stack
        width='832px'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <Typography
          variant='subtitle1'
          textAlign='center'
          fontWeight='bold'
          fontSize='24px'
          mb='24px'
        >
          Tizimga kiring
        </Typography>

        <Stack width='100%' gap='24px' direction='row' alignItems='center'>
          <Stack gap='24px' width='50%'>
            <Input
              control={form.control}
              name='login'
              placeholder='Email (login)*'
              label='Email (login)*'
            />
            <InputPassword
              control={form.control}
              name='password'
              placeholder='Parol*'
              label='Parol*'
            />
            <Button type='submit'>Tizimga kirish</Button>
          </Stack>
          <Stack
            width='50%'
            sx={{
              svg: {
                width: '100%',
                height: '120px',
              },
            }}
          >
            <Logogreeen />
          </Stack>
        </Stack>
      </Stack>
      <LoadingOverlay isLoading={isLoading} />
    </Form>
  )
}
export default Auth

```
- - - - -

`src/pages/auth/useLogin.ts`
```ts
import { type SubmitHandler, useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import { formSchema } from './form.schema'
import { useMutation } from '@tanstack/react-query'
import { login } from '@/apis/login'
import { ROUTER } from '@/constants/router'
import toast from 'react-hot-toast'

interface FormValues {
  login: string
  password: string
}

export const useLogin = () => {
  const form = useForm<FormValues>({
    resolver: yupResolver(formSchema),
  })

  const { mutate, isLoading } = useMutation({
    mutationFn: async data => await login(data),
    onSuccess: res => {
      localStorage.setItem('token', res?.data?.token)
      sessionStorage.setItem('token', res?.data?.token)
      // navigate(ROUTER.HOME)
      window.location.href = ROUTER.HOME
    },
    onError: (err: any) => {
      toast.error(err?.response?.data?.message || 'Nimadur xatolik yuz berdi!')
    },
  })

  const onLogin: SubmitHandler<FormValues | any> = credentials => {
    mutate(credentials)
  }

  return {
    form,
    onLogin,
    isLoading,
  }
}

```
- - - - -

`src/pages/dashboard/agroactivities/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/agroactivities/page.tsx`
```javascript
const AgroActivities = () => {
  return <div>AgroActivities started</div>
}

export default AgroActivities

```
- - - - -

`src/pages/dashboard/apply/constants.ts`
```ts
import { ReactComponent as IconApply } from '@/assets/icons/apply.svg'
import { ReactComponent as IconScoring } from '@/assets/icons/scoring.svg'

export const filter = [
  {
    value: 'apply_status',
    label: 'Ariza statusi',
  },
  {
    value: 'company_name',
    label: 'Korxona nomi',
  },
  {
    value: 'region',
    label: 'Viloyat',
  },
  {
    value: 'district',
    label: 'Tuman',
  },
  {
    value: 'type',
    // eslint-disable-next-line quotes
    label: "Sug'urta turi",
  },
  {
    value: 'apply_date',
    label: 'Ariza sanasi',
  },
]

export const pages = [
  {
    id: 1,
    name: 'Kreditni qoplash sug’urtasi',
    Icon: IconApply,
    link: 'coverage-insurance',
    disabled: false,
    show: true,
  },
  {
    id: 2,
    name: 'Xosil sug’urtasi',
    Icon: IconScoring,
    link: '/main/apply/crop-insurance',
    disabled: false,
    show: true,
  },
]

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/form/index.tsx`
```javascript
import { Input } from '@/components/inputs/input'
import { TextArea } from '@/components/inputs/input-textarea'
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomModal } from '@/components/modal'
import { COLORS } from '@/constants/css'
import type { IModal } from '@/types/modal'
import { Button, Grid, Stack, Typography } from '@mui/material'
import { Fragment, useState } from 'react'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { Form } from 'react-router-dom'
import { useReset } from './useReset'
import { RateSetting } from '../rate-setting'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { rejectApplications } from '@/apis/applications'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import toast from 'react-hot-toast'
import { InputCheckbox } from '@/components/inputs/input-checkbox'

export const ModalForm = ({ open, setOpen, id }: IModal) => {
  const form = useForm()
  const queryClient = useQueryClient()
  const [isCanceled, setIsCanceled] = useState(false)
  const { data, isLoading } = useReset({ id, form })
  const [rateOpen, setRateOpen] = useState(false)
  const isDisabled = data?.status_code === false || data?.status_code === true

  const { mutate } = useMutation({
    mutationFn: async data => await rejectApplications(data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setOpen(false)
      toast.success('Ariza rad etildi')
    },
    onError: err => {
      console.log(err)
      toast.error('Nimadur xatolik yuz berdi')
    },
  })
  const onReject: SubmitHandler<any> = data => {
    const payload: any = { id, comment: data?.comment }
    mutate(payload)
  }

  return (
    <Fragment>
      <CustomModal
        open={open}
        setOpen={setOpen}
        title='Kreditning qaytarilmaslik xatarini sug‘urta qilish bo‘yicha so‘rovnoma-ariza'
      >
        <Form onSubmit={form.handleSubmit(onReject)}>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={6} md={6}>
              <Input
                control={form.control}
                name='number'
                placeholder='Sug‘urta qildiruvchi (bank)'
                label='Sug‘urta qildiruvchi (bank)'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={6} md={6}>
              <Input
                control={form.control}
                name='date'
                placeholder='Qarz oluvchi'
                label='Qarz oluvchi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={4} sm={4} md={4}>
              <Input
                control={form.control}
                name='date'
                placeholder='Kredit shartnomasi'
                label='Kredit shartnomasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={4} sm={4} md={4}>
              <Input
                control={form.control}
                name='date'
                placeholder='Kredit shartnomasining valyutasi'
                label='Kredit shartnomasining valyutasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={4} sm={4} md={4}>
              <Input
                control={form.control}
                name='date'
                placeholder='Kredit miqdori'
                label='Kredit miqdori'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3}>
              <Input
                control={form.control}
                name='date'
                placeholder='Kredit muddati'
                label='Kredit muddati'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3}>
              <Input
                control={form.control}
                name='date'
                placeholder='Sug‘urta shartnomasining valyutasi'
                label='Sug‘urta shartnomasining valyutasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3}>
              <Input
                control={form.control}
                name='date'
                placeholder='Sug‘urta summasi'
                label='Sug‘urta summasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={3}>
              <Input
                control={form.control}
                name='date'
                placeholder='Sug‘urta davri'
                label='Sug‘urta davri'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={12}>
              <TextArea
                control={form.control}
                name='comment'
                placeholder='Kreditning boshqa tafsilotlari'
                label='Kreditning boshqa tafsilotlari'
                InputLabelProps={{
                  shrink: true,
                  style: { color: '#60676D', fontFamily: 'GothamProRegular' },
                }}
              />
            </Grid>
            <Grid item xs={12} sm={12} md={12}>
              <Typography
                sx={{
                  fontFamily: 'GothamProRegular',
                  fontSize: 16,
                  color: 'var(--dark)',
                  margin: '8px 0',
                }}
              >
                Sug‘urta tavakkalchiliklari
              </Typography>
              <Grid container spacing={{ xs: 2, md: 2 }}>
                <Grid item xs={6} sm={4} md={6}>
                  <InputCheckbox
                    control={form.control}
                    name='risk_factors_climatic'
                    label='Surunkali yomg‘ir yog‘ishi xamda yog‘ingarchilikdan so‘ng xavo xaroratini 
              keskin isib ketishi natijasida tuproqning yuqori qatlamini qatqaloq bo‘lishi.'
                    labelPlacement='start'
                    sx={{
                      fontFamily: 'GothamProRegular !important',
                      marginLeft: 0,
                    }}
                  />
                </Grid>
                <Grid item xs={6} sm={4} md={6}>
                  <InputCheckbox
                    control={form.control}
                    name='risk_factors_dehydration'
                    label='qurg‘oqchilik, yong‘in, bo‘ron, do‘l, kuchli yomg‘ir (jala), garmsel, qorasovuq,
               suv toshqini, yashin urishi, uchuvchi apparatlari va ularning qoldiqlarining tushishi'
                    labelPlacement='start'
                    sx={{
                      fontFamily: 'GothamProRegular !important',
                      marginLeft: 0,
                    }}
                  />
                </Grid>
                <Grid item xs={6} sm={4} md={6}>
                  <InputCheckbox
                    control={form.control}
                    name='risk_factors_insects'
                    label='Uchinchi shaxslar tomonidan sug‘urta qilingan paxta xom ashyosi ekinlari va/yoki ularning hosili 
              vegityatsiya davrida qasddan yo‘q qilinishi yoki shikastlantirilishi.'
                    labelPlacement='start'
                    sx={{
                      fontFamily: 'GothamProRegular !important',
                      marginLeft: 0,
                    }}
                  />
                </Grid>
                <Grid item xs={6} sm={4} md={6}>
                  <InputCheckbox
                    control={form.control}
                    name='risk_factors_third_party'
                    label='Zararkunanda xashoratlar yoki kasalliklarni Epifitotik xususiyatga ko‘ra tarqalishi'
                    labelPlacement='start'
                    sx={{
                      fontFamily: 'GothamProRegular !important',
                      marginLeft: 0,
                    }}
                  />
                </Grid>
              </Grid>
            </Grid>
            <Grid item xs={12} sm={12} md={12}>
              <Typography
                sx={{
                  fontFamily: 'GothamProRegular',
                  fontSize: 16,
                  color: 'var(--dark)',
                  margin: '8px 0',
                }}
              >
                Sug‘urta qiymati va sug‘urta summasi
              </Typography>
              <Grid
                container
                spacing={{ xs: 2, md: 2 }}
                sx={{ paddingBottom: isCanceled ? '8px' : '32px' }}
              >
                <Grid item xs={6} sm={4} md={4}>
                  <Input
                    control={form.control}
                    name='insurance_amount'
                    placeholder='Sug‘urta qiymati, so‘m'
                    label='Sug‘urta qiymati (mahsulot qiymati), so‘m'
                  />
                </Grid>
                <Grid item xs={6} sm={4} md={4}>
                  <Input
                    control={form.control}
                    name='insurance_price'
                    placeholder='Sug‘urta summasi, so‘m'
                    label='Sug‘urta summasi (sug‘urta javobgarligi), so‘m'
                  />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
          {isCanceled && (
            <Grid container sx={{ paddingBottom: '32px' }}>
              <Grid item xs={6} sm={4} md={4}>
                <TextArea
                  control={form.control}
                  name='comment'
                  placeholder='Arizani rad etish sababini kiriting'
                  label='Arizani rad etish sababini kiriting'
                />
              </Grid>
            </Grid>
          )}
          <Stack direction='row' spacing={2}>
            {isDisabled ? null : (
              <Fragment>
                {isCanceled ? (
                  <Button
                    variant='outlined'
                    sx={{
                      color: COLORS.RED,
                      borderRadius: '8px',
                      border: `1.5px solid ${COLORS.RED} !important`,
                    }}
                    type='submit'
                  >
                    Rad etish
                  </Button>
                ) : (
                  <Button
                    variant='outlined'
                    sx={{
                      color: COLORS.RED,
                      borderRadius: '8px',
                      border: `1.5px solid ${COLORS.RED} !important`,
                    }}
                    onClick={() => {
                      setIsCanceled(true)
                    }}
                  >
                    Rad etish
                  </Button>
                )}
              </Fragment>
            )}

            <Button
              variant='contained'
              sx={{ background: '#08705F', opacity: 0.7 }}
              onClick={() => {
                setRateOpen(true)
                setOpen(false)
              }}
              disabled={isDisabled}
            >
              Tarifni belgilash
            </Button>
          </Stack>
        </Form>
        <LoadingOverlay isLoading={isLoading} />
      </CustomModal>
      <RateSetting rateOpen={rateOpen} setRateOpen={setRateOpen} id={id} />
    </Fragment>
  )
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/form/useReset.ts`
```ts
import { getByIDApplications } from '@/apis/applications'
import { DATE_FORMAT } from '@/constants/format'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useQuery } from '@tanstack/react-query'
import dayjs from 'dayjs'

interface IReset {
  id: string | null | undefined
  form: any
}

export const useReset = ({ id, form }: IReset) => {
  return useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_BY_ID_APPLICATIONS, id],
    queryFn: async () => await getByIDApplications(id),
    select: res => {
      return res?.data
    },
    onSuccess: response => {
      form.reset({
        date: dayjs(response?.date).format(DATE_FORMAT),
        credit_area_contour_numbers: response?.credit_area_contour_numbers?.map(Number)?.join(','),
        crop_harvest_start: dayjs(response?.crop_harvest_start).format(DATE_FORMAT),
        crop_harvest_end: dayjs(response?.crop_harvest_end).format(DATE_FORMAT),
        legal_location2: `${dayjs(response?.crop_harvest_start).format(DATE_FORMAT)} - ${dayjs(response?.crop_harvest_end).format(DATE_FORMAT)}`,
        ...response,
      })
    },
    enabled: id !== null,
  })
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/header/index.tsx`
```javascript
import { CustomRadioGroup } from '@/components/radio'
import { Stack } from '@mui/material'

export const filter = [
  {
    value: 'apply_status',
    label: 'Ariza statusi',
  },
  {
    value: 'company_name',
    label: 'Korxona nomi',
  },
  {
    value: 'region',
    label: 'Viloyat',
  },
  {
    value: 'district',
    label: 'Tuman',
  },
  {
    value: 'type',
    // eslint-disable-next-line quotes
    label: "Sug'urta turi",
  },
  {
    value: 'apply_date',
    label: 'Ariza sanasi',
  },
]

export const Header = () => {
  return (
    <Stack
      width='100%'
      borderRadius='12px'
      p='32px 24px'
      mx='auto'
      gap='24px'
      bgcolor={theme => theme.palette.allColors.WHITE}
    >
      <CustomRadioGroup options={filter} />
    </Stack>
  )
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/header/style.ts`
```ts

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/rate-setting/form.schema.ts`
```ts
import * as yup from 'yup'

export const formSchema = yup.object().shape({
  insurance_rate_percentage: yup
    .string()
    .required('Ushbu maydon to`ldirilishi shart!')
    .test('is-greater-than', 'Qiymat yuzdan kichik bo`lishi shart!', (value: any) => {
      return !isNaN(value) && parseFloat(value) <= 100
    }),
  paymentPercentage: yup
    .array()
    .of(
      yup.object().shape({
        date: yup.string().required('Sana majburiy'),
        amount: yup
          .number()
          .required('Foiz majburiy')
          .nullable()
          .min(0, 'Foiz 0 dan kichik bo`lmasligi kerak'),
      }),
    )
    .test('total-amount', 'Foizlarning yig‘indisi 100% dan oshmasligi kerak', paymentPercentage => {
      const totalAmount: any = paymentPercentage?.reduce((acc, curr) => acc + (curr.amount || 0), 0)
      return totalAmount <= 100
    }),
})

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/rate-setting/index.tsx`
```javascript
import { acceptApplications } from '@/apis/applications'
import { Input } from '@/components/inputs/input'
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomModal } from '@/components/modal'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { yupResolver } from '@hookform/resolvers/yup'
import { Button, Grid, Stack, Typography } from '@mui/material'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { type SubmitHandler, useForm, useFieldArray, useWatch } from 'react-hook-form'
import { Form } from 'react-router-dom'
import { formSchema } from './form.schema'
import { ReactComponent as IconPlus } from '@/assets/icons/plus.svg'
import { Fragment, useEffect, useState } from 'react'
import { InputDate } from '@/components/inputs/datepicker'

interface IRateSetting {
  id: string | null | undefined
  rateOpen: boolean
  setRateOpen: React.Dispatch<React.SetStateAction<boolean>>
}

interface FormValues {
  insurance_rate_percentage: string
  percent?: string
}
export const RateSetting = ({ rateOpen, setRateOpen, id }: IRateSetting) => {
  const [isButtonDisabled, setIsButtonDisabled] = useState(false)
  const queryClient = useQueryClient()
  const form = useForm<FormValues | any>({
    resolver: yupResolver(formSchema),
    defaultValues: {
      insurance_rate_percentage: '',
      percent: '10',
      paymentPercentage: [{ date: '', amount: null }],
    },
  })
  const { fields, append } = useFieldArray({
    control: form.control,
    name: 'paymentPercentage',
  })
  const watchedPaymentPercentage = useWatch({
    control: form.control,
    name: 'paymentPercentage',
  })

  useEffect(() => {
    const totalAmount = watchedPaymentPercentage.reduce(
      (acc: any, curr: any) => Number(acc) + Number(curr.amount || 0),
      0,
    )
    if (totalAmount === 100) {
      setIsButtonDisabled(true)
    } else {
      setIsButtonDisabled(false)
    }
  }, [watchedPaymentPercentage])

  const { mutate, isLoading } = useMutation({
    mutationFn: async data => await acceptApplications(id, data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setRateOpen(false)
    },
    onError: err => {
      console.log(err)
    },
  })

  const onSetting: SubmitHandler<FormValues | any> = data => {
    const payload: any = {
      insurance_rate_percentage: parseFloat(data?.insurance_rate_percentage),
      credit_periods: data?.paymentPercentage?.map((v: any) => {
        return {
          date: new Date(v?.date).toISOString(),
          amount: Number(v?.amount),
        }
      }),
    }
    mutate(payload)
  }

  return (
    <CustomModal
      open={rateOpen}
      setOpen={setRateOpen}
      title='Tarif rejasi (franshiza)'
      fullScreen={false}
      maxWidth='xs'
    >
      <Form onSubmit={form.handleSubmit(onSetting)}>
        <Grid container spacing={{ xs: 2, md: 2 }}>
          <Grid item xs={8} sm={8} md={8}>
            <Input
              control={form.control}
              name='insurance_rate_percentage'
              placeholder='Tarif'
              type='number'
            />
          </Grid>
          <Grid item xs={4} sm={4} md={4}>
            <Input
              control={form.control}
              name='percent'
              placeholder='Foiz'
              type='number'
              disabled
            />
          </Grid>
          <Grid item xs={12} sm={6} md={12}>
            <Typography fontSize={16} fontWeight={400} fontFamily='GothamProRegular'>
              Kontraktning to'lov foizini belgilang
            </Typography>
          </Grid>
          {fields.map((item, index) => {
            return (
              <Fragment key={item.id}>
                <Grid item xs={8} sm={8} md={8}>
                  <Input
                    control={form.control}
                    name={`paymentPercentage.${index}.amount`}
                    placeholder='Foiz'
                    type='number'
                  />
                </Grid>
                <Grid item xs={4} sm={4} md={4}>
                  <InputDate control={form.control} name={`paymentPercentage.${index}.date`} />
                </Grid>
              </Fragment>
            )
          })}
          <Grid item xs={12} sm={12} md={12} display='flex' justifyContent='center'>
            <Button
              startIcon={<IconPlus />}
              onClick={() => {
                append({
                  amount: null,
                  date: '',
                })
              }}
              sx={{ background: '#08705F !important' }}
              disabled={isButtonDisabled}
              className='add-btn'
            >
              To'lov muddati qo‘shish
            </Button>
          </Grid>
        </Grid>
        <Stack direction='row' spacing={2} sx={{ marginTop: '32px' }}>
          <Button
            variant='outlined'
            onClick={() => {
              setRateOpen(false)
            }}
          >
            Ortga qaytish
          </Button>
          <Button variant='contained' type='submit' sx={{ opacity: 0.7 }}>
            Shartnomani shakllantirish
          </Button>
        </Stack>
      </Form>
      <LoadingOverlay isLoading={isLoading} />
    </CustomModal>
  )
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/reject/form.schema.ts`
```ts
/* eslint-disable quotes */
import * as yup from 'yup'

export const formSchema = yup.object().shape({
  comment: yup.string().required("Ushbu maydon to'ldirilishi shart"),
})

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/reject/index.tsx`
```javascript
import type { Dispatch, SetStateAction } from 'react'
import { TextArea } from '@/components/inputs/input-textarea'
import { CustomModal } from '@/components/modal'
import { yupResolver } from '@hookform/resolvers/yup'
import { Button, Stack } from '@mui/material'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { formSchema } from './form.schema'
import { Form } from 'react-router-dom'
import { COLORS } from '@/constants/css'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { rejectApplications } from '@/apis/applications'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { LoadingOverlay } from '@/components/loading-overlay'

interface IRejectProps {
  rejectOpen: boolean
  setRejectOpen: Dispatch<SetStateAction<boolean>>
  id: string | null
}

interface FormValues {
  comment: string
}

export const Reject = ({ rejectOpen, setRejectOpen, id }: IRejectProps) => {
  const queryClient = useQueryClient()
  const form = useForm<FormValues>({
    resolver: yupResolver(formSchema),
  })

  const { mutate, isLoading } = useMutation({
    mutationFn: async data => await rejectApplications(data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setRejectOpen(false)
    },
    onError: err => {
      console.log(err)
    },
  })

  const onReject: SubmitHandler<FormValues> = data => {
    const payload: any = { id, comment: data?.comment }
    mutate(payload)
  }

  return (
    <CustomModal open={rejectOpen} setOpen={setRejectOpen} title='Rad etish sababi' maxWidth='sm'>
      <Form onSubmit={form.handleSubmit(onReject)}>
        <TextArea control={form.control} placeholder='Rad etish sababi' name='comment' />
        <Stack direction='row' width='100%' justifyContent='flex-end' marginTop='18px' spacing={2}>
          <Button
            sx={{ width: 140, border: `1px solid ${COLORS.RED} !important`, color: COLORS.RED }}
            variant='outlined'
            onClick={() => {
              setRejectOpen(false)
            }}
          >
            Bekor qilish
          </Button>
          <Button sx={{ width: 140 }} type='submit'>
            Rad etish
          </Button>
        </Stack>
      </Form>
      <LoadingOverlay isLoading={isLoading} />
    </CustomModal>
  )
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/components/status/index.tsx`
```javascript
import { Button, Stack } from '@mui/material'

interface ICheckStatus {
  id: string | number
  status_code: boolean | null
  accept: (id: string | number) => void
  reject: (id: string | number) => void
  handleOpen: <T>(info: T) => void
  info: any
}

export const CheckStatus = ({
  id,
  status_code,
  accept,
  reject,
  handleOpen,
  info,
}: ICheckStatus) => {
  switch (status_code) {
    case null:
      return (
        <Stack direction='row' spacing={2}>
          <Button
            variant='outlined'
            onClick={() => {
              handleOpen(info)
            }}
            sx={{
              color: '#60676D',
              borderRadius: '4px',
              border: '1px solid #E7E7E7',
              width: 115,
              height: 32,
            }}
          >
            Belgilash
          </Button>
        </Stack>
      )
    default:
      return (
        <Button
          variant='outlined'
          onClick={() => {
            handleOpen(info)
          }}
          sx={{
            color: '#60676D',
            borderRadius: '4px',
            border: '1px solid #E7E7E7',
            width: 115,
            height: 32,
          }}
        >
          Ko'rish
        </Button>
      )
  }
}

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/constants.ts`
```ts

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/page.tsx`
```javascript
import { Stack } from '@mui/material'
import { CustomPagination } from '@/components/pagination'
import { Header } from './components/header'
import { LoadingOverlay } from '@/components/loading-overlay'
import { Reject } from './components/reject'
import { CustomTable } from '@/components/table'
import BreadcrumpCustom from '@/components/breadcrumb'
import { usePage } from './usePage'
import { ModalForm } from './components/form'

const ApplyCoverageInsurance = () => {
  const {
    open,
    data,
    count,
    rowId,
    params,
    columns,
    setOpen,
    setParams,
    isLoading,
    rejectOpen,
    setRejectOpen,
  } = usePage()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack gap='32px'>
        <Header />
        <Stack
          width='100%'
          borderRadius='12px'
          p='32px 24px'
          mx='auto'
          gap='24px'
          bgcolor={theme => theme.palette.allColors.WHITE}
        >
          <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
          {data.length > 0 ? (
            <CustomPagination params={params} setParams={setParams} count={count} />
          ) : null}
        </Stack>
        <LoadingOverlay isLoading={isLoading} />
        <ModalForm open={open} setOpen={setOpen} id={rowId} />
        <Reject rejectOpen={rejectOpen} setRejectOpen={setRejectOpen} id={rowId} />
      </Stack>
    </Stack>
  )
}

export default ApplyCoverageInsurance

```
- - - - -

`src/pages/dashboard/apply/coverage-insurance/usePage.tsx`
```javascript
import { useState } from 'react'
import { createColumnHelper } from '@tanstack/react-table'
import { useMutation, useQuery } from '@tanstack/react-query'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { acceptApplications, getAllApplications } from '@/apis/applications'
import { Badge } from '../style'
import dayjs from 'dayjs'
import { DATE_FORMAT } from '@/constants/format'
import { CheckStatus } from './components/status'
import { useLocation } from 'react-router-dom'
import type { Apply } from '@/types/apply'

const columnHelper = createColumnHelper<Apply>()

export const usePage = () => {
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [rowId, setRowId] = useState(null)
  const [open, setOpen] = useState(false)
  const [rejectOpen, setRejectOpen] = useState(false)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const {
    data = {
      count: 0,
      results: [],
    },
    isLoading,
    refetch,
  } = useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS, params],
    queryFn: async () => await getAllApplications({ params, type_code: 2 }),
    select: res => {
      return {
        count: res?.data?.count,
        results: res?.data?.result,
      }
    },
    keepPreviousData: true,
  })

  const handleOpen = (info: any) => {
    setRowId(info?.row?.original?._id)
    setOpen(true)
  }

  const { mutate } = useMutation({
    mutationFn: async data =>
      await acceptApplications(data, {
        insurance_liability: '10',
      }),
    onSuccess: res => {
      void refetch()
    },
    onError: err => {
      console.log(err)
    },
  })

  const accept = (id: string | any) => {
    mutate(id)
  }

  const reject = (id: string | any) => {
    setRejectOpen(true)
    setRowId(id)
  }

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('name', {
      id: 'apply_status',
      cell: ({ row }: any) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code === true ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Ariza statusi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('farmer_name', {
      header: () => 'Korxona nomi',
      cell: ({ row }) => {
        return <p>{row.original.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('region', {
      header: () => <span>Viloyat</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('district', {
      header: () => <span>Tuman</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type_name', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }) => {
        return <p>{row.original.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Ariza sanasi</span>,
      cell: ({ row }) => {
        return <p>{dayjs(row.original.date).format(DATE_FORMAT)}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: (info: any) => (
        <CheckStatus
          id={info?.row?.original?._id}
          status_code={info.row.original.status_code}
          accept={() => {
            accept(info?.row?.original?._id)
          }}
          reject={() => {
            reject(info?.row?.original?._id)
          }}
          handleOpen={() => {
            handleOpen(info)
          }}
          info={info}
        />
      ),
    }),
  ]

  return {
    open,
    data: data.results,
    count: data.count,
    rowId,
    params,
    columns,
    setOpen,
    setParams,
    isLoading,
    rejectOpen,
    setRejectOpen,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/form/index.tsx`
```javascript
import { Fragment } from 'react'
import { Input } from '@/components/inputs/input'
import { InputCheckbox } from '@/components/inputs/input-checkbox'
import { TextArea } from '@/components/inputs/input-textarea'
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomModal } from '@/components/modal'
import { COLORS } from '@/constants/css'
import type { IModal } from '@/types/modal'
import { Button, Grid, Stack, Typography } from '@mui/material'
import { Form } from 'react-router-dom'
import { RateSetting } from '../rate-setting'
import { useAppForm } from './useAppForm'

export const ModalForm = ({ open, setOpen, id }: IModal) => {
  const {
    data,
    form,
    rateOpen,
    onReject,
    isLoading,
    isDisabled,
    isCanceled,
    riskFactors,
    setRateOpen,
    setIsCanceled,
    handleContourNumber,
  } = useAppForm({
    setOpen,
    id,
  })

  return (
    <Fragment>
      <CustomModal open={open} setOpen={setOpen} title='Shartnoma generatsiya qilish'>
        {isLoading ? (
          <LoadingOverlay isLoading={isLoading} />
        ) : (
          <Form>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='number'
                  placeholder='Ariza raqami'
                  label='Ariza raqami'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='date'
                  placeholder='Sana'
                  label='Sana'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4} />
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='region'
                  placeholder='Viloyat'
                  label='Viloyat'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='district'
                  placeholder='Tuman'
                  label='Tuman'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Sug’urta qildiruvchi
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='farmer_name'
                  placeholder='To`liq nomi'
                  label='To`liq nomi'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='farmer_stir'
                  placeholder='STIR raqami'
                  label='STIR raqami'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='farmer_requisites'
                  placeholder='Bank rekvizitlari'
                  label='Bank rekvizitlari'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='creditor_address'
                  placeholder='Yuridik manzili'
                  label='Yuridik manzili'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Naf oluvchi
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='creditor_name'
                  placeholder='To`liq nomi'
                  label='To`liq nomi'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='creditor_stir'
                  placeholder='STIR raqami'
                  label='STIR raqami'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='creditor_requisites'
                  placeholder='Bank rekvizitlari'
                  label='Bank rekvizitlari'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='creditor_address'
                  placeholder='Yuridik manzili'
                  label='Yuridik manzili'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Sug‘urtalash hududi
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='credit_area_region_name'
                  placeholder='Viloyat'
                  label='Viloyat'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='credit_area_district_name'
                  placeholder='Tuman'
                  label='Tuman'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='credit_area_massiv_name'
                  placeholder='Hudud (massiv)'
                  label='Hudud (massiv)'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <div className='contour-numbers'>
                  <label>Kontur raqamlari</label>
                  <Stack sx={{ display: 'flex', flexDirection: 'row', gap: 1 }} mt='4px'>
                    {data?.credit_area_contour_numbers?.map((v: any, idx: number) => {
                      return (
                        <button
                          key={idx}
                          type='button'
                          onClick={() => {
                            handleContourNumber(v)
                          }}
                        >
                          {v?.number ? v?.number : v}
                        </button>
                      )
                    })}
                  </Stack>
                </div>
              </Grid>
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Sug‘urtalash uchun so‘ralgan ekinlar
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_name'
                  placeholder='Q/x ekini nomi'
                  label='Q/x ekini nomi'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_area'
                  placeholder='Ekin (ko‘chat) maydoni, ga'
                  label='Ekin (ko‘chat) maydoni, ga'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_fertility_norm'
                  placeholder='Me’yoriy hosildorlik, s/ga'
                  label='Me’yoriy hosildorlik, s/ga'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_price'
                  placeholder='Hosilni 1 tn narxi, so‘m'
                  label='Hosilni 1 tn narxi, so‘m'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_actual_harvest'
                  placeholder='Yalpi hosil, tn'
                  label='Yalpi hosil, tn'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Terim-yig'im muddati
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_harvest_start'
                  placeholder='Boshlash sanasi'
                  label='Boshlash sanasi'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='crop_harvest_end'
                  placeholder='Yakunlash sanasi'
                  label='Yakunlash sanasi'
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
            </Grid>

            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Sug‘urta tavakkalchiliklari
            </Typography>
            <Grid container spacing={{ xs: 2, md: 2 }}>
              {riskFactors?.map((v: any, idx: number) => {
                return (
                  <Grid item xs={6} sm={4} md={6} key={idx}>
                    <InputCheckbox
                      control={form.control}
                      name={v?.key}
                      label={v?.text}
                      sx={{
                        fontFamily: 'GothamProRegular !important',
                        marginLeft: 0,
                      }}
                    />
                  </Grid>
                )
              })}

              {/* <Grid item xs={6} sm={4} md={6}>
                <InputCheckbox
                  control={form.control}
                  name='risk_factors_dehydration'
                  label='qurg‘oqchilik, yong‘in, bo‘ron, do‘l, kuchli yomg‘ir (jala), garmsel, qorasovuq,
               suv toshqini, yashin urishi, uchuvchi apparatlari va ularning qoldiqlarining tushishi'
                  labelPlacement='start'
                  sx={{
                    fontFamily: 'GothamProRegular !important',
                    marginLeft: 0,
                  }}
                  disabled
                />
              </Grid>
              <Grid item xs={6} sm={4} md={6}>
                <InputCheckbox
                  control={form.control}
                  name='risk_factors_insects'
                  label='Uchinchi shaxslar tomonidan sug‘urta qilingan paxta xom ashyosi ekinlari va/yoki ularning hosili 
              vegityatsiya davrida qasddan yo‘q qilinishi yoki shikastlantirilishi.'
                  labelPlacement='start'
                  sx={{
                    fontFamily: 'GothamProRegular !important',
                    marginLeft: 0,
                  }}
                  disabled
                />
              </Grid>
              <Grid item xs={6} sm={4} md={6}>
                <InputCheckbox
                  control={form.control}
                  name='risk_factors_third_party'
                  label='Zararkunanda xashoratlar yoki kasalliklarni Epifitotik xususiyatga ko‘ra tarqalishi'
                  labelPlacement='start'
                  sx={{
                    fontFamily: 'GothamProRegular !important',
                    marginLeft: 0,
                  }}
                  disabled
                />
              </Grid> */}
            </Grid>
            <Typography
              sx={{
                fontFamily: 'GothamProRegular',
                fontSize: 16,
                color: 'var(--dark)',
                margin: '8px 0',
              }}
            >
              Sug‘urta qiymati va sug‘urta summasi
            </Typography>
            <Grid
              container
              spacing={{ xs: 2, md: 2 }}
              sx={{ paddingBottom: isCanceled ? '8px' : '32px' }}
            >
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='insurance_amount'
                  placeholder='Sug‘urta qiymati, so‘m'
                  label='Sug‘urta qiymati (mahsulot qiymati), so‘m'
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='insurance_price'
                  placeholder='Sug‘urta summasi, so‘m'
                  label='Sug‘urta summasi (sug‘urta javobgarligi), so‘m'
                />
              </Grid>
              <Grid item xs={6} sm={4} md={4}>
                <Input
                  control={form.control}
                  name='insurance_liability'
                  placeholder='Sug‘urta javobgarlik foizi, %'
                  label='Sug‘urta javobgarlik foizi, %'
                />
              </Grid>
            </Grid>
            {isCanceled && (
              <Grid container sx={{ paddingBottom: '32px' }}>
                <Grid item xs={6} sm={4} md={4}>
                  <TextArea
                    control={form.control}
                    name='comment'
                    placeholder='Arizani rad etish sababini kiriting'
                    label='Arizani rad etish sababini kiriting'
                  />
                </Grid>
              </Grid>
            )}
            <Stack direction='row' spacing={2}>
              {isDisabled ? null : (
                <Fragment>
                  {isCanceled ? (
                    <Button
                      variant='outlined'
                      sx={{
                        color: COLORS.RED,
                        borderRadius: '8px',
                        border: `1.5px solid ${COLORS.RED} !important`,
                      }}
                      onClick={onReject}
                    >
                      Rad etish
                    </Button>
                  ) : (
                    <Button
                      variant='outlined'
                      sx={{
                        color: COLORS.RED,
                        borderRadius: '8px',
                        border: `1.5px solid ${COLORS.RED} !important`,
                      }}
                      onClick={() => {
                        setIsCanceled(true)
                      }}
                    >
                      Rad etish
                    </Button>
                  )}
                </Fragment>
              )}

              <Button
                variant='contained'
                sx={{ background: '#08705F', opacity: 0.7 }}
                onClick={() => {
                  setRateOpen(true)
                  setOpen(false)
                }}
                disabled={isDisabled}
              >
                Tarifni belgilash
              </Button>
            </Stack>
          </Form>
        )}
      </CustomModal>
      <RateSetting rateOpen={rateOpen} setRateOpen={setRateOpen} id={id} />
    </Fragment>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/form/useAppForm.ts`
```ts
import { rejectApplications } from '@/apis/applications'
import { request } from '@/configs/requests'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useGeoJsonStore } from '@/store/geojson'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { useState } from 'react'
import { useForm } from 'react-hook-form'
import toast from 'react-hot-toast'
import { useNavigate } from 'react-router-dom'
import { useReset } from './useReset'

interface IProps {
  id: string | null | undefined
  setOpen: React.Dispatch<React.SetStateAction<boolean>>
}

export const useAppForm = ({ setOpen, id }: IProps) => {
  const form = useForm()
  const navigate = useNavigate()
  const queryClient = useQueryClient()
  const [rateOpen, setRateOpen] = useState(false)
  const [isCanceled, setIsCanceled] = useState(false)
  const { setGeoJson } = useGeoJsonStore()
  const { data, isLoading } = useReset({ id, form })
  const isDisabled = data?.status_code === false || data?.status_code === true

  const { mutate } = useMutation({
    mutationFn: async data => await rejectApplications(data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setOpen(false)
      setIsCanceled(false)
      toast.success('Ariza rad etildi')
    },
    onError: err => {
      console.log(err)
      toast.error('Nimadur xatolik yuz berdi')
    },
  })
  const onReject = () => {
    if (form.watch('comment') === undefined) {
      toast.error('Izoh kiriting!')
    } else {
      const payload: any = { id, comment: form.watch('comment') }
      mutate(payload)
    }
  }

  const { data: riskFactors = [] } = useQuery({
    queryKey: ['config-risk-factors'],
    queryFn: async () => await request('/config/risk-factors'),
    select: res => {
      return res?.data?.risk_factors
    },
  })

  const handleContourNumber = (item: any) => {
    setGeoJson(item)
    if (item?.data) {
      navigate(`/main/apply/crop-insurance/land-areas/${item?.data?.features?.[0]?.properties?.id}`)
    }
  }

  return {
    data,
    form,
    rateOpen,
    onReject,
    isLoading,
    isDisabled,
    isCanceled,
    riskFactors,
    setRateOpen,
    setIsCanceled,
    handleContourNumber,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/form/useReset.ts`
```ts
import { getByIDApplications } from '@/apis/applications'
import { DATE_FORMAT } from '@/constants/format'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useQuery } from '@tanstack/react-query'
import dayjs from 'dayjs'

interface IReset {
  id: string | null | undefined
  form: any
}

export const useReset = ({ id, form }: IReset) => {
  return useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_BY_ID_APPLICATIONS, id],
    queryFn: async () => await getByIDApplications(id),
    select: res => {
      return res?.data
    },
    onSuccess: response => {
      form.reset({
        ...response,
        date: dayjs(response?.date).format(DATE_FORMAT),
        credit_area_contour_numbers: response?.credit_area_contour_numbers?.join(','),
        crop_harvest_start: dayjs(response?.crop_harvest_start).format(DATE_FORMAT),
        crop_harvest_end: dayjs(response?.crop_harvest_end).format(DATE_FORMAT),
        insurance_liability: response?.insurance_liability,
        legal_location2: `${dayjs(response?.crop_harvest_start).format(DATE_FORMAT)} - ${dayjs(response?.crop_harvest_end).format(DATE_FORMAT)}`,
        region: response?.region_name,
        district: response?.district_name,
        credit_area_region_name:
          response?.credit_area_region_name || response?.credit_area_region_code,
        credit_area_district_name:
          response?.credit_area_district_name || response?.credit_area_district_code,
        credit_area_massiv_name:
          response?.credit_area_massiv_name || response?.credit_area_massiv_code,
      })
    },
    enabled: id !== null,
  })
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/rate-setting/form.schema.ts`
```ts
import * as yup from 'yup'

export const formSchema = yup.object().shape({
  insurance_rate_percentage: yup
    .string()
    .required('Ushbu maydon to`ldirilishi shart!')
    .test('is-greater-than', 'Qiymat yuzdan kichik bo`lishi shart!', (value: any) => {
      return !isNaN(value) && parseFloat(value) <= 100
    }),
  // paymentPercentage: yup
  //   .array()
  //   .of(
  //     yup.object().shape({
  //       date: yup.string().required('Sana majburiy'),
  //       amount: yup
  //         .number()
  //         .required('Foiz majburiy')
  //         .nullable()
  //         .min(0, 'Foiz 0 dan kichik bo`lmasligi kerak'),
  //     }),
  //   )
  //   .test(
  //     'total-amount',
  //     'Foizlarning yig‘indisi 100% dan oshmasligi kerak',
  //     function (paymentPercentage) {
  //       const totalAmount: any = paymentPercentage?.reduce(
  //         (acc, curr) => acc + (curr.amount || 0),
  //         0,
  //       )
  //       return totalAmount <= 100
  //     },
  //   ),
})

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/rate-setting/index.tsx`
```javascript
import { acceptApplications } from '@/apis/applications'
import { Input } from '@/components/inputs/input'
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomModal } from '@/components/modal'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { yupResolver } from '@hookform/resolvers/yup'
import { Button, Grid, Stack, Typography } from '@mui/material'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { type SubmitHandler, useForm, useFieldArray, useWatch } from 'react-hook-form'
import { Form } from 'react-router-dom'
import { formSchema } from './form.schema'
import { ReactComponent as IconPlus } from '@/assets/icons/plus.svg'
import { Fragment, useEffect, useState } from 'react'
import { InputDate } from '@/components/inputs/datepicker'
import toast from 'react-hot-toast'
import { request } from '@/configs/requests'

interface IRateSetting {
  id: string | null | undefined
  rateOpen: boolean
  setRateOpen: React.Dispatch<React.SetStateAction<boolean>>
}

interface FormValues {
  insurance_rate_percentage: string
  percent?: string
}
export const RateSetting = ({ rateOpen, setRateOpen, id }: IRateSetting) => {
  const [isButtonDisabled, setIsButtonDisabled] = useState(false)
  const queryClient = useQueryClient()
  const form = useForm<FormValues | any>({
    resolver: yupResolver(formSchema),
    defaultValues: {
      insurance_rate_percentage: '',
      percent: '10',
      paymentPercentage: [{ date: '', amount: null }],
    },
  })
  const { fields, append } = useFieldArray({
    control: form.control,
    name: 'paymentPercentage',
  })
  const watchedPaymentPercentage = useWatch({
    control: form.control,
    name: 'paymentPercentage',
  })

  useQuery({
    queryKey: ['config-insurance'],
    queryFn: async () => await request('/config/insurance'),
    select: response => {
      return response?.data?.insurance
    },
  })

  const { data = [] } = useQuery({
    queryKey: ['config-payment-schedule'],
    queryFn: async () => await request('/config/payment-schedule'),
    select: response => {
      return response?.data?.payment_schedule
    },
  })

  useEffect(() => {
    const totalAmount = watchedPaymentPercentage.reduce(
      (acc: any, curr: any) => Number(acc) + Number(curr.amount || 0),
      0,
    )

    if (totalAmount >= 100) {
      setIsButtonDisabled(true)
    } else {
      setIsButtonDisabled(false)
    }
  }, [watchedPaymentPercentage])

  const { mutate, isLoading } = useMutation({
    mutationFn: async data => await acceptApplications(id, data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setRateOpen(false)
      toast.success('Ariza qabul qilindi')
    },
    onError: err => {
      console.log(err)
    },
  })

  const onSetting: SubmitHandler<FormValues | any> = data => {
    const payload: any = {
      insurance_rate_percentage: parseFloat(data?.insurance_rate_percentage),
      credit_periods: data?.paymentPercentage?.map((v: any) => {
        return {
          date: new Date(v?.date).toISOString(),
          amount: Number(v?.amount),
        }
      }),
    }
    const total = payload?.credit_periods?.reduce(
      (prev: number, next: any) => prev + next?.amount,
      0,
    )
    if (total === 100) {
      mutate(payload)
    } else {
      toast.error('Foizlarning yig‘indisi 100% dan oshmasligi kerak')
    }
  }

  return (
    <CustomModal
      open={rateOpen}
      setOpen={setRateOpen}
      title='Tarif rejasi (franshiza)'
      fullScreen={false}
      maxWidth='xs'
    >
      <Form onSubmit={form.handleSubmit(onSetting)}>
        <Grid container spacing={{ xs: 2, md: 2 }}>
          <Grid item xs={8} sm={8} md={8}>
            <Input
              control={form.control}
              name='insurance_rate_percentage'
              placeholder='Tarif'
              type='number'
            />
          </Grid>
          <Grid item xs={4} sm={4} md={4}>
            <Input
              control={form.control}
              name='percent'
              placeholder='Foiz'
              type='number'
              disabled
            />
          </Grid>
          <Grid item xs={12} sm={6} md={12}>
            <Typography fontSize={16} fontWeight={400} fontFamily='GothamProRegular'>
              Kontraktning to'lov foizini belgilang
            </Typography>
          </Grid>
          {fields.map((item, index) => {
            return (
              <Fragment key={item.id}>
                <Grid item xs={8} sm={8} md={8}>
                  <Input
                    control={form.control}
                    name={`paymentPercentage.${index}.amount`}
                    placeholder='Foiz'
                    type='number'
                  />
                </Grid>
                <Grid item xs={4} sm={4} md={4}>
                  <InputDate control={form.control} name={`paymentPercentage.${index}.date`} />{' '}
                </Grid>
              </Fragment>
            )
          })}
          <Grid item xs={12} sm={12} md={12} display='flex' justifyContent='center'>
            <Button
              startIcon={<IconPlus />}
              onClick={() => {
                append({
                  amount: null,
                  date: '',
                })
              }}
              sx={{ background: '#08705F !important' }}
              disabled={isButtonDisabled}
              className='add-btn'
            >
              To'lov muddati qo‘shish
            </Button>
          </Grid>
        </Grid>
        <Stack direction='row' spacing={2} sx={{ marginTop: '32px' }}>
          <Button
            variant='outlined'
            onClick={() => {
              setRateOpen(false)
            }}
          >
            Ortga qaytish
          </Button>
          <Button variant='contained' type='submit' sx={{ opacity: 0.7, width: '100%' }}>
            Shartnomani shakllantirish
          </Button>
        </Stack>
      </Form>
      <LoadingOverlay isLoading={isLoading} />
    </CustomModal>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/reject/form.schema.ts`
```ts
/* eslint-disable quotes */
import * as yup from 'yup'

export const formSchema = yup.object().shape({
  comment: yup.string().required("Ushbu maydon to'ldirilishi shart"),
})

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/reject/index.tsx`
```javascript
import type { Dispatch, SetStateAction } from 'react'
import { TextArea } from '@/components/inputs/input-textarea'
import { CustomModal } from '@/components/modal'
import { yupResolver } from '@hookform/resolvers/yup'
import { Button, Stack } from '@mui/material'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { formSchema } from './form.schema'
import { Form } from 'react-router-dom'
import { COLORS } from '@/constants/css'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { rejectApplications } from '@/apis/applications'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { LoadingOverlay } from '@/components/loading-overlay'

interface IRejectProps {
  rejectOpen: boolean
  setRejectOpen: Dispatch<SetStateAction<boolean>>
  id: string | null
}

interface FormValues {
  comment: string
}

export const Reject = ({ rejectOpen, setRejectOpen, id }: IRejectProps) => {
  const queryClient = useQueryClient()
  const form = useForm<FormValues>({
    resolver: yupResolver(formSchema),
  })

  const { mutate, isLoading } = useMutation({
    mutationFn: async data => await rejectApplications(data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setRejectOpen(false)
    },
    onError: err => {
      console.log(err)
    },
  })

  const onReject: SubmitHandler<FormValues> = data => {
    const payload: any = { id, comment: data?.comment }
    mutate(payload)
  }

  return (
    <CustomModal open={rejectOpen} setOpen={setRejectOpen} title='Rad etish sababi' maxWidth='sm'>
      <Form onSubmit={form.handleSubmit(onReject)}>
        <TextArea control={form.control} placeholder='Rad etish sababi' name='comment' />
        <Stack direction='row' width='100%' justifyContent='flex-end' marginTop='18px' spacing={2}>
          <Button
            sx={{ width: 140, border: `1px solid ${COLORS.RED} !important`, color: COLORS.RED }}
            variant='outlined'
            onClick={() => {
              setRejectOpen(false)
            }}
          >
            Bekor qilish
          </Button>
          <Button sx={{ width: 140 }} type='submit'>
            Rad etish
          </Button>
        </Stack>
      </Form>
      <LoadingOverlay isLoading={isLoading} />
    </CustomModal>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/components/status/index.tsx`
```javascript
import { Button, Stack } from '@mui/material'

interface ICheckStatus {
  id: string | number
  status_code: boolean | null
  accept: (id: string | number) => void
  reject: (id: string | number) => void
  handleOpen: <T>(info: T) => void
  info: any
}

export const CheckStatus = ({
  id,
  status_code,
  accept,
  reject,
  handleOpen,
  info,
}: ICheckStatus) => {
  switch (status_code) {
    case null:
      return (
        <Stack direction='row' spacing={2}>
          <Button
            variant='outlined'
            onClick={() => {
              handleOpen(info)
            }}
            sx={{
              color: '#60676D',
              borderRadius: '4px',
              border: '1px solid #E7E7E7',
              width: 115,
              height: 32,
            }}
          >
            Belgilash
          </Button>
        </Stack>
      )
    default:
      return (
        <Button
          variant='outlined'
          onClick={() => {
            handleOpen(info)
          }}
          sx={{
            color: '#60676D',
            borderRadius: '4px',
            border: '1px solid #E7E7E7',
            width: 115,
            height: 32,
          }}
        >
          Ko'rish
        </Button>
      )
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/constants.ts`
```ts

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/form/index.tsx`
```javascript
import { Input } from '@/components/inputs/input'
import { TextArea } from '@/components/inputs/input-textarea'
import { COLORS } from '@/constants/css'
import { Button, Grid, Stack, Typography } from '@mui/material'
import { Fragment } from 'react'
import { Form } from 'react-router-dom'
import { useAppForm } from './useAppForm'
import { InputCheckbox } from '@/components/inputs/input-checkbox'
import { LoadingOverlay } from '@/components/loading-overlay'
import LoadingButton from '@mui/lab/LoadingButton'

interface IContractFormProps {
  slug: string | undefined
}

export const ContractForm = ({ slug }: IContractFormProps) => {
  const {
    data,
    form,
    accept,
    onReject,
    isLoading,
    isDisabled,
    isCanceled,
    riskFactors,
    setIsCanceled,
  } = useAppForm({ slug })

  return (
    <>
      {isLoading ? (
        <LoadingOverlay isLoading={isLoading} />
      ) : (
        <Form>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='date'
                placeholder='Sana'
                label='Sana'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='region'
                placeholder='Viloyat'
                label='Viloyat'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='district'
                placeholder='Tuman'
                label='Tuman'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Sug’urta qildiruvchi
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='farmer_name'
                placeholder='To`liq nomi'
                label='To`liq nomi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='farmer_stir'
                placeholder='STIR raqami'
                label='STIR raqami'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='farmer_requisites'
                placeholder='Bank rekvizitlari'
                label='Bank rekvizitlari'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='creditor_address'
                placeholder='Yuridik manzili'
                label='Yuridik manzili'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Naf oluvchi
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='creditor_name'
                placeholder='To`liq nomi'
                label='To`liq nomi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='creditor_stir'
                placeholder='STIR raqami'
                label='STIR raqami'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='creditor_requisites'
                placeholder='Bank rekvizitlari'
                label='Bank rekvizitlari'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='creditor_address'
                placeholder='Yuridik manzili'
                label='Yuridik manzili'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Sug‘urtalash hududi
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='credit_area_region_name'
                placeholder='Viloyat'
                label='Viloyat'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='credit_area_district_name'
                placeholder='Tuman'
                label='Tuman'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='credit_area_massiv_name'
                placeholder='Hudud (massiv)'
                label='Hudud (massiv)'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <div className='contour-numbers'>
                <label>Kontur raqamlari</label>
                <Stack sx={{ display: 'flex', flexDirection: 'row', gap: 1 }} mt='4px'>
                  {data?.credit_area_contour_numbers?.map((v: any, idx: number) => {
                    return (
                      <button key={idx} type='button'>
                        {v?.number ? v?.number : v}
                      </button>
                    )
                  })}
                </Stack>
              </div>
            </Grid>
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Sug‘urtalash uchun so‘ralgan ekinlar
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_name'
                placeholder='Q/x ekini nomi'
                label='Q/x ekini nomi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_area'
                placeholder='Ekin (ko‘chat) maydoni, ga'
                label='Ekin (ko‘chat) maydoni, ga'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_fertility_norm'
                placeholder='Me’yoriy hosildorlik, s/ga'
                label='Me’yoriy hosildorlik, s/ga'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_price'
                placeholder='Hosilni 1 tn narxi, so‘m'
                label='Hosilni 1 tn narxi, so‘m'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_actual_harvest'
                placeholder='Yalpi hosil, tn'
                label='Yalpi hosil, tn'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Terim-yig'im muddati
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_harvest_start'
                placeholder='Boshlash sanasi'
                label='Boshlash sanasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='crop_harvest_end'
                placeholder='Yakunlash sanasi'
                label='Yakunlash sanasi'
                InputProps={{
                  readOnly: true,
                }}
              />
            </Grid>
          </Grid>

          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Sug‘urta tavakkalchiliklari
          </Typography>
          <Grid container spacing={{ xs: 2, md: 2 }}>
            {riskFactors?.map((v: any, idx: number) => {
              return (
                <Grid item xs={6} sm={4} md={6} key={idx}>
                  <InputCheckbox
                    control={form.control}
                    name={v?.key}
                    label={v?.text}
                    sx={{
                      fontFamily: 'GothamProRegular !important',
                      marginLeft: 0,
                    }}
                  />
                </Grid>
              )
            })}
          </Grid>
          <Typography
            sx={{
              fontFamily: 'GothamProRegular',
              fontSize: 16,
              color: 'var(--dark)',
              margin: '8px 0',
            }}
          >
            Sug‘urta qiymati va sug‘urta summasi
          </Typography>
          <Grid
            container
            spacing={{ xs: 2, md: 2 }}
            sx={{ paddingBottom: isCanceled ? '8px' : '32px' }}
          >
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='insurance_amount'
                placeholder='Sug‘urta qiymati, so‘m'
                label='Sug‘urta qiymati (mahsulot qiymati), so‘m'
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='insurance_price'
                placeholder='Sug‘urta summasi, so‘m'
                label='Sug‘urta summasi (sug‘urta javobgarligi), so‘m'
              />
            </Grid>
            <Grid item xs={6} sm={4} md={4}>
              <Input
                control={form.control}
                name='insurance_liability'
                placeholder='Sug‘urta javobgarlik foizi, %'
                label='Sug‘urta javobgarlik foizi, %'
              />
            </Grid>
          </Grid>
          {isCanceled && (
            <Grid container sx={{ paddingBottom: '32px' }}>
              <Grid item xs={6} sm={4} md={4}>
                <TextArea
                  control={form.control}
                  name='comment'
                  placeholder='Arizani rad etish sababini kiriting'
                  label='Arizani rad etish sababini kiriting'
                />
              </Grid>
            </Grid>
          )}
          <Stack direction='row' spacing={2}>
            {isDisabled ? null : (
              <Fragment>
                {isCanceled ? (
                  <Button
                    variant='outlined'
                    sx={{
                      color: COLORS.RED,
                      borderRadius: '8px',
                      border: `1.5px solid ${COLORS.RED} !important`,
                    }}
                    onClick={onReject}
                  >
                    Rad etish
                  </Button>
                ) : (
                  <Button
                    variant='outlined'
                    sx={{
                      color: COLORS.RED,
                      borderRadius: '8px',
                      border: `1.5px solid ${COLORS.RED} !important`,
                    }}
                    onClick={() => {
                      setIsCanceled(true)
                    }}
                  >
                    Rad etish
                  </Button>
                )}
              </Fragment>
            )}

            <LoadingButton
              variant='contained'
              sx={{ background: '#08705F', opacity: 0.7 }}
              onClick={accept}
              disabled={isDisabled}
            >
              Tasdiqlash
            </LoadingButton>
          </Stack>
        </Form>
      )}
    </>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/form/useAppForm.ts`
```ts
import { useState } from 'react'
import { acceptApplications, rejectApplications } from '@/apis/applications'
import { request } from '@/configs/requests'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useGeoJsonStore } from '@/store/geojson'
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'
import { useFormContext } from 'react-hook-form'
import toast from 'react-hot-toast'
import { useNavigate, useParams } from 'react-router-dom'
import { useReset } from './useReset'

interface IAppFormProps {
  slug: string | undefined
}

export const useAppForm = ({ slug }: IAppFormProps) => {
  const { id } = useParams()
  const form = useFormContext()
  const navigate = useNavigate()
  const queryClient = useQueryClient()
  const [rateOpen, setRateOpen] = useState(false)
  const [isCanceled, setIsCanceled] = useState(false)
  const { setGeoJson } = useGeoJsonStore()
  const { data, isLoading } = useReset({ id: slug, form })
  const isDisabled = data?.status_code === false || data?.status_code === true

  const { mutate } = useMutation({
    mutationFn: async data => await rejectApplications(data),
    onSuccess: () => {
      void queryClient.invalidateQueries({ queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS] })
      setIsCanceled(false)
      toast.success('Ariza rad etildi')
    },
    onError: err => {
      console.log(err)
      toast.error('Nimadur xatolik yuz berdi')
    },
  })
  const onReject = () => {
    if (form.watch('comment') === undefined) {
      toast.error('Izoh kiriting!')
    } else {
      const payload: any = { id: slug, comment: form.watch('comment') }
      mutate(payload)
    }
  }

  const { data: riskFactors = [] } = useQuery({
    queryKey: ['config-risk-factors'],
    queryFn: async () => await request('/config/risk-factors'),
    select: res => {
      return res?.data?.risk_factors
    },
  })

  const { mutate: acceptMutate } = useMutation({
    mutationFn: async (data: string | undefined) => await acceptApplications(data),
    onSuccess: res => {
      navigate(`/main/contracts/crop-insurance/create/${res?.data?.contract_id}`)
      toast.success('Ariza qabul qilindi')
    },
  })

  const accept = () => {
    acceptMutate(id)
  }

  const handleContourNumber = (item: any) => {
    setGeoJson(item)
    if (item?.data) {
      navigate(`/main/apply/crop-insurance/land-areas/${item?.data?.features?.[0]?.properties?.id}`)
    }
  }

  return {
    data,
    form,
    accept,
    rateOpen,
    onReject,
    isLoading,
    isDisabled,
    isCanceled,
    riskFactors,
    setRateOpen,
    setIsCanceled,
    handleContourNumber,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/form/useReset.ts`
```ts
import { getByIDApplications } from '@/apis/applications'
import { DATE_FORMAT } from '@/constants/format'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useQuery } from '@tanstack/react-query'
import dayjs from 'dayjs'

interface IReset {
  id: string | null | undefined
  form: any
}

export const useReset = ({ id, form }: IReset) => {
  return useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_BY_ID_APPLICATIONS, id],
    queryFn: async () => await getByIDApplications(id),
    select: res => {
      return res?.data
    },
    onSuccess: response => {
      form.reset({
        ...response,
        date: dayjs(response?.date).format(DATE_FORMAT),
        credit_area_contour_numbers: response?.credit_area_contour_numbers?.join(','),
        crop_harvest_start: dayjs(response?.crop_harvest_start).format(DATE_FORMAT),
        crop_harvest_end: dayjs(response?.crop_harvest_end).format(DATE_FORMAT),
        insurance_liability: response?.insurance_liability,
        legal_location2: `${dayjs(response?.crop_harvest_start).format(DATE_FORMAT)} - ${dayjs(response?.crop_harvest_end).format(DATE_FORMAT)}`,
        region: response?.region_name,
        district: response?.district_name,
        credit_area_region_name:
          response?.credit_area_region_name || response?.credit_area_region_code,
        credit_area_district_name:
          response?.credit_area_district_name || response?.credit_area_district_code,
        credit_area_massiv_name:
          response?.credit_area_massiv_name || response?.credit_area_massiv_code,
      })
    },
    enabled: id !== null,
  })
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/anomalous-area/index.tsx`
```javascript
export const AnomalousArea = () => {
  return <div>AnomalousArea</div>
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/mndwi/chart/index.tsx`
```javascript
import ReactApexChart from 'react-apexcharts'

interface IVegetationChart {
  series: number[]
  categories: string[]
}

export const VegetationChart = ({ series = [], categories = [] }: IVegetationChart) => {
  const data = [
    {
      name: 'Средняя',
      data: series, // O'rtacha qiymatlar
    },
  ]

  const options: any = {
    chart: {
      type: 'line',
      height: 300,
      toolbar: { show: false },
      zoom: {
        enabled: true,
        type: 'x',
        autoScaleYaxis: true,
      },
    },
    colors: ['#A855F7', '#8B5CF6', '#D8B4FE'],
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      type: 'solid',
      opacity: [0.3, 0.2, 0.1],
    },
    markers: {
      size: 4,
      hover: { sizeOffset: 2 },
    },
    dataLabels: {
      enabled: false,
      style: {
        fontSize: '12px',
        colors: ['#A855F7'],
        borderRadius: '50%',
      },
    },

    tooltip: {
      shared: true,
      intersect: false,
      x: { format: 'dd MMM' },
      y: {
        formatter: (value: number) => value.toFixed(2),
      },
    },
    grid: {
      borderColor: '#E5E7EB',
      strokeDashArray: 5,
    },
    xaxis: {
      categories,
      labels: {
        style: { colors: '#6B7280' },
        rotate: -45,
        show: true,
      },
    },
    yaxis: {
      min: undefined,
      labels: { formatter: (val: number) => val.toFixed(2) },
    },
    legend: {
      show: true,
      position: 'top',
    },
  }

  return (
    <div id='chart'>
      <ReactApexChart options={options} series={data} type='line' width='70%' height={300} />
    </div>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/mndwi/index.tsx`
```javascript
import { SelectInput } from '@/components/select'
import { Grid } from '@mui/material'
import { useFormContext } from 'react-hook-form'
import { Wrapper } from './style'
import { VegetationChart } from './chart'

interface ISelect {
  label: string
  value: string
}

interface INdvi {
  dates: ISelect[]
  series: number[]
  categories: string[]
}

export const MNDWI = ({ dates, series, categories }: INdvi) => {
  const form = useFormContext()

  return (
    <Wrapper>
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }} mb='32px'>
        <Grid item xs={6} sm={4} md={4}>
          <SelectInput
            label='Sana'
            name='date'
            control={form.control}
            placeholder='Sana'
            options={dates}
          />
        </Grid>
      </Grid>
      <VegetationChart series={series} categories={categories} />
    </Wrapper>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/mndwi/style.ts`
```ts
import styled from '@emotion/styled'

export const Wrapper = styled('div')``

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/ndvi/chart/index.tsx`
```javascript
import ReactApexChart from 'react-apexcharts'

interface IVegetationChart {
  series: number[]
  categories: string[]
}

export const VegetationChart = ({ series, categories }: IVegetationChart) => {
  const data = [
    {
      name: 'Средняя',
      data: series, // O'rtacha qiymatlar
    },
  ]

  const options: any = {
    chart: {
      type: 'line',
      height: 300,
      toolbar: { show: false },
      zoom: {
        enabled: true,
        type: 'x',
        autoScaleYaxis: true,
      },
    },
    colors: ['#A855F7', '#8B5CF6', '#D8B4FE'],
    stroke: {
      curve: 'smooth',
      width: 2,
    },
    fill: {
      type: 'solid',
      opacity: [0.3, 0.2, 0.1],
    },
    markers: {
      size: 4,
      hover: { sizeOffset: 2 },
    },
    dataLabels: {
      enabled: false,
      style: {
        fontSize: '12px',
        colors: ['#A855F7'],
        borderRadius: '50%',
      },
    },

    tooltip: {
      shared: true,
      intersect: false,
      x: { format: 'dd MMM' },
      y: {
        formatter: (value: number) => value.toFixed(2),
      },
    },
    grid: {
      borderColor: '#E5E7EB',
      strokeDashArray: 5,
    },
    xaxis: {
      categories,
      labels: {
        style: { colors: '#6B7280' },
        rotate: -45,
        show: true,
      },
    },
    yaxis: {
      min: undefined,
      labels: { formatter: (val: number) => val.toFixed(2) },
    },
    legend: {
      show: true,
      position: 'top',
    },
  }

  return (
    <div id='chart'>
      <ReactApexChart options={options} series={data} type='line' width='70%' height={300} />
    </div>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/ndvi/index.tsx`
```javascript
import { SelectInput } from '@/components/select'
import { Grid } from '@mui/material'
import { useFormContext } from 'react-hook-form'
import { Wrapper } from './style'
import { VegetationChart } from './chart'

interface ISelect {
  label: string
  value: string
}

interface INdvi {
  dates: ISelect[]
  series: number[]
  categories: string[]
}

export const NDVI = ({ dates, series, categories }: INdvi) => {
  const form = useFormContext()

  return (
    <Wrapper>
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }} mb='32px'>
        <Grid item xs={6} sm={4} md={4}>
          <SelectInput
            label='Sana'
            name='date'
            control={form.control}
            placeholder='Sana'
            options={dates}
          />
        </Grid>
      </Grid>
      <VegetationChart series={series} categories={categories} />
    </Wrapper>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/ndvi/style.ts`
```ts
import styled from '@emotion/styled'

export const Wrapper = styled('div')``

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/pointers/index.tsx`
```javascript
import { CustomTable } from '@/components/table'
import { Grid, Stack } from '@mui/material'
import { useTable } from './useTable'
import type { CreditAreaContour } from '@/types/credit-area'
import { Box, Label } from './style'

interface IPointersProps {
  details: any
  pointerData: CreditAreaContour[]
}

export const Pointers = ({ details, pointerData }: IPointersProps) => {
  const { data, columns } = useTable({ pointerData })

  return (
    <Stack gap='24px'>
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
        <Grid item xs={6} sm={4} md={4}>
          <Stack>
            <Label>Korxona nomi</Label>
            <Box>{details?.farmer_name}</Box>
          </Stack>
        </Grid>
        <Grid item xs={6} sm={4} md={4}>
          <Stack>
            <Label>Maydoni</Label>
            <Box>{details?.crop_area}</Box>
          </Stack>
        </Grid>
        <Grid item xs={6} sm={4} md={4}>
          <Stack>
            <Label>INN</Label>
            <Box>{details?.farmer_stir}</Box>
          </Stack>
        </Grid>
      </Grid>
      <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas" />
    </Stack>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/pointers/style.ts`
```ts
import styled from '@emotion/styled'

export const Label = styled('label')`
  font-family: 'GothamProRegular', sans-serif;
  font-weight: 400;
  font-size: 14px;
  letter-spacing: 0.1px;
  line-height: 22px;
  color: #60676d;
  margin-bottom: 4px;
`

export const Box = styled('div')`
  width: 100%;
  background-color: #f5f5f5;
  border-radius: 8px;
  white-space: nowrap;
  overflow: hidden;
  padding: 12px 16px;
  font-size: 14px;
  font-family: 'GothamProRegular', sans-serif;
`

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/pointers/useTable.tsx`
```javascript
import type { CreditAreaContour } from '@/types/credit-area'
import { createColumnHelper } from '@tanstack/react-table'
import { useMemo } from 'react'

const columnHelper = createColumnHelper<any>()

interface ITableProps {
  pointerData: CreditAreaContour[]
}

export const useTable = ({ pointerData }: ITableProps) => {
  const columns = useMemo(
    () => [
      columnHelper.accessor('number', {
        cell: info => info.row.index + 1,
        header: () => <span>№</span>,
        footer: info => info.column.id,
      }),
      columnHelper.accessor('cad_number', {
        header: () => 'Kadastr raqami',
        footer: info => info.column.id,
      }),
      columnHelper.accessor('contour_number', {
        header: () => <span>Kontur raqami</span>,
        footer: info => info.column.id,
      }),
      columnHelper.accessor('ball_bonitet', {
        header: () => <span>Ball boniteti</span>,
        cell: ({ row }) => {
          return <p>Hosil sug'urtasi</p>
        },
        footer: info => info.column.id,
      }),
    ],
    [],
  )

  return {
    data:
      pointerData?.map((point: any) => {
        const properties = point?.data?.features?.[0]?.properties
        return {
          cad_number: properties?.cad_number ?? '-',
          contour_number: properties?.contour_number ?? '-',
          ball_bonitet: properties?.ball_bonitet ?? '-',
        }
      }) || [],
    columns,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/soil-analysis/index.tsx`
```javascript
import { CustomTable } from '@/components/table'
import type { StationData } from '@/types/meteo'
import { Stack, Typography } from '@mui/material'
import type { ColumnDef } from '@tanstack/react-table'
import { useMemo } from 'react'

interface ISoilAnalysisProps {
  data: StationData[]
}

export const SoilAnalysis = ({ data = [] }: ISoilAnalysisProps) => {
  // Define table columns
  const columns: Array<ColumnDef<any>> = useMemo(
    () => [
      {
        accessorKey: 'depth',
        header: 'Chuqurlik (sm)',
      },
      {
        accessorKey: 'temperature',
        header: 'Harorat (°C)',
        cell: info => info.getValue() ?? 'Maʼlumot yoʻq',
      },
      {
        accessorKey: 'moisture',
        header: 'Namlik (%)',
        cell: info => info.getValue() ?? 'Maʼlumot yoʻq',
      },
    ],
    [],
  )

  // Prepare data for each station
  const prepareTableData = (latestData: any) => [
    {
      depth: '10cm',
      temperature: latestData?.soilTemperature?.depth1 ?? '-',
      moisture: latestData?.soilMoisture?.depth1 ?? '-',
    },
    {
      depth: '20cm',
      temperature: latestData?.soilTemperature?.depth2 ?? '-',
      moisture: latestData?.soilMoisture?.depth2 ?? '-',
    },
    {
      depth: '30cm',
      temperature: latestData?.soilTemperature?.depth3 ?? '-',
      moisture: latestData?.soilMoisture?.depth3 ?? '-',
    },
    {
      depth: '40cm',
      temperature: latestData?.soilTemperature?.depth4 ?? '-',
      moisture: latestData?.soilMoisture?.depth4 ?? '-',
    },
  ]

  return (
    <Stack spacing={4}>
      {data?.map((stationData: StationData) => (
        <Stack key={stationData?.station?.id} spacing={2}>
          <Typography variant='h6' fontFamily='GothamProRegular' fontSize={14} fontWeight={600}>
            {stationData?.station?.name}
          </Typography>
          <CustomTable
            options={{
              data: prepareTableData(stationData?.latestData),
              columns,
            }}
            emptyTitle="Ma'lumot yo'q"
          />
        </Stack>
      ))}
    </Stack>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/tabs/index.tsx`
```javascript
import * as React from 'react'
import Tabs from '@mui/material/Tabs'
import Tab from '@mui/material/Tab'
import Box from '@mui/material/Box'
import { styled } from '@mui/material/styles'
import { Pointers } from '../pointers'
import { Weather } from '../weather'
import { SoilAnalysis } from '../soil-analysis'
import { NDVI } from '../ndvi'
import type { CreditAreaContour } from '@/types/credit-area'
import type { StationData } from '@/types/meteo'
import { MNDWI } from '../mndwi'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role='tabpanel'
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  )
}

function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  }
}

// Custom Tab styling
const StyledTabs = styled(Tabs)({
  '& .MuiTabs-indicator': {
    backgroundColor: '#2F847C', // Green underline
    height: '3px',
  },
})

const StyledTab = styled(Tab)(({ theme }) => ({
  fontFamily: 'GothamProRegular',
  fontWeight: 400,
  textTransform: 'none',
  fontSize: '14px',
  color: '#000',
  '&.Mui-selected': {
    fontWeight: 600,
    color: '#2F847C',
  },
}))

interface ISelect {
  label: string
  value: string
}

interface ICustomTabsProps {
  value: number
  dates: ISelect[]
  series: number[] | any
  categories: string[]
  pointerData: CreditAreaContour[]
  meteoData: StationData[]
  details: any
  setValue: React.Dispatch<React.SetStateAction<number>>
}

export const CustomTabs = ({
  value,
  setValue,
  dates,
  series,
  categories,
  pointerData,
  meteoData,
  details,
}: ICustomTabsProps) => {
  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue)
  }

  return (
    <Box sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <StyledTabs value={value} onChange={handleChange} aria-label='custom styled tabs'>
          <StyledTab label="Ko'rsatgichlari" {...a11yProps(0)} />
          <StyledTab label='NDVI' {...a11yProps(1)} />
          <StyledTab label='MNDWI' {...a11yProps(2)} />
          <StyledTab label='Ob-havo' {...a11yProps(3)} />
          <StyledTab label='Tuproq tahlili' {...a11yProps(4)} />
        </StyledTabs>
      </Box>
      <CustomTabPanel value={value} index={0}>
        <Pointers details={details} pointerData={pointerData} />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={1}>
        <NDVI dates={dates} series={series} categories={categories} />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={2}>
        <MNDWI dates={dates} series={series} categories={categories} />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={3}>
        <Weather />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={4}>
        <SoilAnalysis data={meteoData} />
      </CustomTabPanel>
    </Box>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/tabs/style.ts`
```ts

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/components/weather/index.tsx`
```javascript
export const Weather = () => {
  return (
    <iframe
      width='100%'
      height='300'
      src='https://embed.windy.com/embed.html?type=map&location=coordinates&metricRain=mm&metricTemp=°C&metricWind=m/s&zoom=5&overlay=wind&product=ecmwf&level=surface&lat=41.311081&lon=69.240562&detailLat=41.311081&detailLon=69.240562&detail=true&message=true'
      frameBorder='0'
    />
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/page.tsx`
```javascript
import { Stack } from '@mui/material'
import { CustomTabs } from './components/tabs'
import { usePage } from './usePage'
import { LoadingOverlay } from '@/components/loading-overlay'
import { MapContainer } from './style'
import { FormProvider } from 'react-hook-form'
import type { CreditAreaContour } from '@/types/credit-area'
import { COLORS } from '@/constants/css'

interface ILandAreasProps {
  details: any
  pointerData: CreditAreaContour[]
}

const LandAreas = ({ details, pointerData }: ILandAreasProps) => {
  const { ref, form, data, value, dates, setValue, isLoading, meteoData } = usePage({ pointerData })

  const series = Array.isArray(data)
    ? data?.map((item: any) =>
        value === 1
          ? Number(item?.average_value)?.toFixed(2)
          : Number(item?.average_value)?.toFixed(2),
      )
    : []

  const categories = Array.isArray(data)
    ? data?.map((item: any) => {
        const date = new Date(item?.date)
        const day = String(date.getDate()).padStart(2, '0')
        const month = date.toLocaleString('default', { month: 'short' })
        return `${day} ${month}`
      })
    : []

  return (
    <Stack>
      <Stack
        width='100%'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={COLORS.WHITE}
      >
        <MapContainer ref={ref} />
        <FormProvider {...form}>
          <CustomTabs
            value={value}
            setValue={setValue}
            dates={dates || []}
            series={series || []}
            categories={categories || []}
            pointerData={pointerData}
            meteoData={meteoData}
            details={details}
          />
        </FormProvider>
      </Stack>
      <LoadingOverlay isLoading={isLoading} />
    </Stack>
  )
}

export default LandAreas

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/style.ts`
```ts
import styled from '@emotion/styled'

export const MapContainer = styled('div')`
  width: 100%;
  flex-grow: 1;
  height: 45vh;
  z-index: 1;
`

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/land-areas/usePage.ts`
```ts
// @ts-nocheck
import { useEffect, useRef, useState } from 'react'
import { useLocation } from 'react-router-dom'
import L, { type LatLngExpression } from 'leaflet'
import GeoRasterLayer from 'georaster-layer-for-leaflet'
import parseGeoraster from 'georaster'
import 'leaflet/dist/leaflet.css'
import 'leaflet-fullscreen/dist/leaflet.fullscreen.css'
import 'leaflet-fullscreen'
import { useQuery } from '@tanstack/react-query'
import dayjs from 'dayjs'
import { useFormContext } from 'react-hook-form'
import type { CreditAreaContour } from '@/types/credit-area'
import { request } from '@/configs/requests'

import icon from 'leaflet/dist/images/marker-icon.png'
import iconShadow from 'leaflet/dist/images/marker-shadow.png'

// Constants
const ZOOM = 10
const CENTER: LatLngExpression = [40.7, 72.2]

const DefaultIcon = L.icon({
  iconUrl: icon,
  shadowUrl: iconShadow,
  iconSize: [25, 41],
  iconAnchor: [12, 41],
})

L.Marker.prototype.options.icon = DefaultIcon

const DEFAULT_LAYER = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
  maxZoom: 20,
  subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
})

interface ICreditAreaContour {
  pointerData: CreditAreaContour[]
}

export const usePage = ({ pointerData }: ICreditAreaContour) => {
  // Hooks and Refs
  const form = useFormContext()
  const location = useLocation()
  const ref = useRef<HTMLDivElement | null>(null)

  // State Management
  const [map, setMap] = useState<L.Map | null>(null)
  const [dates, setDates] = useState<any[]>([])
  const [centerLatLng, setCenterLatLng] = useState<L.LatLng | null>(null)
  const [geoLayer, setGeoLayer] = useState<L.LayerGroup | null>(null)
  const [currentOverlay, setCurrentOverlay] = useState<any>(null)
  const [ndviList, setNdviList] = useState<any[]>([])
  const [value, setValue] = useState(0)

  // Form and URL values
  const { date } = form.watch()
  const query = new URLSearchParams(location.search)
  const apply_number = query.get('number')

  // Color configurations
  const ndviColors = {
    veryLow: '#d73027',
    low: '#f46d43',
    modLow: '#fdae61',
    moderate: '#fee08b',
    modHigh: '#d9ef8b',
    high: '#a6d96a',
    veryHigh: '#1a9850',
  }

  const waterNdwiColors = {
    veryLow: '#4a148c',
    low: '#5c6bc0',
    modLow: '#7986cb',
    moderate: '#9fa8da',
    modHigh: '#c5cae9',
    high: '#e8eaf6',
    veryHigh: '#f5f5ff',
  }

  // Initialize Map
  useEffect(() => {
    if (!ref.current || map) return

    const mapInstance = L.map(ref.current, {
      zoom: ZOOM,
      center: CENTER,
      layers: [DEFAULT_LAYER],
      fullscreenControl: true,
      fullscreenControlOptions: {
        position: 'topright',
        title: 'To`liq ekran rejimi',
        titleCancel: 'To`liq ekran rejimidan chiqish',
      },
    })

    setMap(mapInstance)

    const layerGroup = new L.LayerGroup().addTo(mapInstance)
    setGeoLayer(layerGroup)

    return () => {
      mapInstance.remove()
    }
  }, [])

  // Legend Control
  useEffect(() => {
    if (!map) return

    const legend = L.control({ position: 'bottomright' })

    legend.onAdd = function () {
      const div = L.DomUtil.create('div', 'info legend')

      if (value === 2) {
        const waterLabels = [
          { color: waterNdwiColors.veryLow, label: 'Juda past suv indeksi' },
          { color: waterNdwiColors.low, label: 'Past suv indeksi' },
          { color: waterNdwiColors.modLow, label: 'O`rtacha past suv indeksi' },
          { color: waterNdwiColors.moderate, label: 'O`rta suv indeksi' },
          { color: waterNdwiColors.modHigh, label: 'O`rtacha yuqori suv indeksi' },
          { color: waterNdwiColors.high, label: 'Yuqori suv indeksi' },
          { color: waterNdwiColors.veryHigh, label: 'Juda yuqori suv indeksi' },
        ]

        div.innerHTML += '<strong>Suv indeksi</strong><br>'
        waterLabels.forEach(({ color, label }) => {
          div.innerHTML += `<i style="background: ${color}; width: 12px; height: 12px; display: inline-block; margin-right: 5px;"></i> ${label}<br>`
        })
      } else {
        const ndviLabels = [
          { color: ndviColors.veryLow, label: 'Juda past o`simlik qoplami' },
          { color: ndviColors.low, label: 'Past o`simlik qoplami' },
          { color: ndviColors.modLow, label: 'O`rtacha past o`simlik qoplami' },
          { color: ndviColors.moderate, label: 'O`rtacha o`simlik qatlami' },
          { color: ndviColors.modHigh, label: 'O`rtacha yuqori o`simlik qoplami' },
          { color: ndviColors.high, label: 'Yuqori o`simlik qoplami' },
          { color: ndviColors.veryHigh, label: 'Juda yuqori o`simlik qoplami' },
        ]

        div.innerHTML += '<strong>Vegetatsiya indeksi</strong><br>'
        ndviLabels.forEach(({ color, label }) => {
          div.innerHTML += `<i style="background: ${color}; width: 12px; height: 12px; display: inline-block; margin-right: 5px;"></i> ${label}<br>`
        })
      }

      return div
    }

    legend.addTo(map)

    return () => {
      map.removeControl(legend)
    }
  }, [map, value])

  // TIFF Display Function
  const displayTiffOnMap = async (tiffData: any, map: L.Map) => {
    try {
      if (!tiffData) {
        console.error('TIFF data mavjud emas')
        return
      }

      // Remove existing overlay
      if (currentOverlay) {
        map.removeLayer(currentOverlay)
        setCurrentOverlay(null)
      }

      // Parse TIFF data
      const arrayBuffer = await fetch(tiffData).then(async response => await response.arrayBuffer())
      const georaster = await parseGeoraster(arrayBuffer)

      // Create new layer
      const layer = new GeoRasterLayer({
        georaster,
        opacity: 0.7,
        resolution: 256,
        pixelValuesToColorFn: values => {
          const value = values[0]
          if (value === 2) {
            // NDWI colors
            if (value < -0.5) return waterNdwiColors.veryLow
            if (value < -0.3) return waterNdwiColors.low
            if (value < -0.1) return waterNdwiColors.modLow
            if (value < 0.1) return waterNdwiColors.moderate
            if (value < 0.3) return waterNdwiColors.modHigh
            if (value < 0.5) return waterNdwiColors.high
            return waterNdwiColors.veryHigh
          } else {
            // NDVI colors
            if (value < 0) return ndviColors.veryLow
            if (value < 0.2) return ndviColors.low
            if (value < 0.4) return ndviColors.modLow
            if (value < 0.6) return ndviColors.moderate
            if (value < 0.8) return ndviColors.modHigh
            return ndviColors.veryHigh
          }
        },
      })

      layer.addTo(map)
      setCurrentOverlay(layer)
    } catch (error) {
      console.error('TIFF faylni xaritaga yuklashda xatolik:', error)
    }
  }

  // Fetch Dates Query
  const { isLoading } = useQuery({
    queryKey: ['ndvi-dates', value, apply_number],
    queryFn: async () => {
      const endpoint = value === 2 ? `ndwi/insurance/${apply_number}` : `ndvi/${apply_number}/dates`
      return await request(endpoint)
    },
    select: res => res?.data?.dates,
    onSuccess: res => {
      setNdviList(res)
      setDates(
        res?.map((ndvi: any) => ({
          label: dayjs(ndvi?.date).format('YYYY-MM-DD'),
          value: dayjs(ndvi?.date).format('YYYY-MM-DD'),
          download_url: ndvi?.download_url,
        })),
      )

      if (res?.length > 0) {
        form.reset({
          date: dayjs(res[0]?.date).format('YYYY-MM-DD'),
        })
      }

      // Add GeoJSON layers
      if (map && geoLayer) {
        pointerData?.forEach((item: CreditAreaContour) => {
          const geometry: any = item.data?.features?.[0]?.geometry
          const geo = L.geoJSON(geometry, {
            style: {
              color: 'green',
              weight: 2,
              opacity: 0.7,
              fillOpacity: 0.1,
            },
          }).addTo(geoLayer)

          const bounds = geo.getBounds()
          const center = bounds.getCenter()
          setCenterLatLng(center)
          map.flyToBounds(bounds, { maxZoom: 16 })
        })
      }
    },
  })

  // Fetch TIFF Data Query
  useQuery({
    queryKey: ['get-ndvi-with-contour', apply_number, date, value],
    queryFn: async () => {
      const endpoint =
        value === 2 ? `ndwi/insurance/${apply_number}` : `ndvi/${apply_number}/${date}.tiff`
      return await request(endpoint)
    },
    onSuccess: response => {
      if (response?.data && map) {
        void displayTiffOnMap(response.data, map)
      }
    },
  })

  // Meteo Data Query
  const { data: meteoData = [] } = useQuery({
    queryKey: ['get-meteo', value, centerLatLng?.lng, centerLatLng?.lat],
    queryFn: async () =>
      await request(
        `meteo/stations/closest?longitude=${centerLatLng?.lng}&latitude=${centerLatLng?.lat}`,
      ),
    select: response => response?.data,
    onSuccess: res => {
      if (res?.length > 0 && map) {
        res.forEach((station: any) => {
          const coordinates = station?.station?.location?.coordinates
          if (coordinates) {
            const [lng, lat] = coordinates
            const marker = L.marker([lat, lng]).addTo(map)
            marker.bindPopup(`<b>${station?.station?.name}</b>`)
          }
        })
      }
    },
    enabled: value === 4 && !!centerLatLng?.lat && !!centerLatLng?.lng,
  })

  return {
    ref,
    form,
    data: ndviList,
    value,
    dates,
    setValue,
    isLoading,
    meteoData,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/components/tabs/index.tsx`
```javascript
import * as React from 'react'
import Tabs from '@mui/material/Tabs'
import Tab from '@mui/material/Tab'
import Box from '@mui/material/Box'
import { styled } from '@mui/material/styles'
import { ContractForm } from '../form'
import LandAreas from '../land-areas'
import type { CreditAreaContour } from '@/types/credit-area'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role='tabpanel'
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  )
}

function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  }
}

// Custom Tab styling
const StyledTabs = styled(Tabs)({
  '& .MuiTabs-indicator': {
    backgroundColor: '#2F847C', // Green underline
    height: '3px',
  },
})

const StyledTab = styled(Tab)(({ theme }) => ({
  fontFamily: 'GothamProRegular',
  fontWeight: 400,
  textTransform: 'none',
  fontSize: '14px',
  color: '#000', // Default color for inactive tabs
  '&.Mui-selected': {
    fontWeight: 600, // Bold for active tab
    color: '#2F847C', // Green color for active tab
  },
}))

interface ICustomTabsProps {
  slug: string | undefined
  value: number
  details: any
  pointerData: CreditAreaContour[]
  setValue: React.Dispatch<React.SetStateAction<number>>
}

export const CustomTabs = ({ slug, value, details, pointerData, setValue }: ICustomTabsProps) => {
  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue)
  }

  return (
    <Box sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <StyledTabs value={value} onChange={handleChange} aria-label='custom styled tabs'>
          <StyledTab label='Shartnoma generatsiya qilish' {...a11yProps(0)} />
          <StyledTab label='Yer maydonlari' {...a11yProps(1)} />
        </StyledTabs>
      </Box>
      <CustomTabPanel value={value} index={0}>
        <ContractForm slug={slug} />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={1}>
        <LandAreas details={details} pointerData={pointerData} />
      </CustomTabPanel>
    </Box>
  )
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/page.tsx`
```javascript
import { Stack } from '@mui/material'
import { CustomTabs } from './components/tabs'
import { usePage } from './usePage'
import { FormProvider } from 'react-hook-form'

const FormContract = () => {
  const { slug, form, value, details, setValue } = usePage()

  return (
    <Stack>
      <Stack gap='24px'>
        <Stack
          width='100%'
          borderRadius='12px'
          p='32px 24px'
          mx='auto'
          gap='24px'
          bgcolor={theme => theme.palette.allColors.WHITE}
        >
          <FormProvider {...form}>
            <CustomTabs
              slug={slug}
              value={value}
              details={details}
              pointerData={details?.credit_area_contour_numbers}
              setValue={setValue}
            />
          </FormProvider>
        </Stack>
      </Stack>
    </Stack>
  )
}

export default FormContract

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/form-contract/usePage.ts`
```ts
import { useState } from 'react'
import { getByIDApplications } from '@/apis/applications'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { useQuery } from '@tanstack/react-query'
import { useForm } from 'react-hook-form'
import { useParams } from 'react-router-dom'

export const usePage = () => {
  const form = useForm()
  const { id } = useParams()
  const [value, setValue] = useState(0)

  const { data: details = null } = useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_BY_ID_APPLICATIONS + 'new', id],
    queryFn: async () => await getByIDApplications(id),
    select: res => {
      return res?.data
    },
    onSuccess: response => {
      if (response) {
        form.reset({
          farmer_name: response?.farmer_name,
          crop_area: response?.crop_area,
          farmer_stir: response?.farmer_stir,
        })
      }
    },
  })

  return {
    slug: id,
    form,
    value,
    details,
    setValue,
  }
}

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/page.tsx`
```javascript
import { Stack } from '@mui/material'
import { CustomPagination } from '@/components/pagination'
import { LoadingOverlay } from '@/components/loading-overlay'
import { Reject } from './components/reject'
import { CustomTable } from '@/components/table'
import BreadcrumpCustom from '@/components/breadcrumb'
import { usePage } from './usePage'
import { ModalForm } from './components/form'

const ApplyCropInsurance = () => {
  const {
    open,
    data,
    count,
    rowId,
    params,
    columns,
    setOpen,
    setParams,
    isLoading,
    rejectOpen,
    setRejectOpen,
  } = usePage()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack gap='32px'>
        <Stack
          width='100%'
          borderRadius='12px'
          p='32px 24px'
          mx='auto'
          gap='24px'
          bgcolor={theme => theme.palette.allColors.WHITE}
        >
          <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
          {data.length > 0 ? (
            <CustomPagination params={params} setParams={setParams} count={count} />
          ) : null}
        </Stack>
        <LoadingOverlay isLoading={isLoading} />
        <ModalForm open={open} setOpen={setOpen} id={rowId} />
        <Reject rejectOpen={rejectOpen} setRejectOpen={setRejectOpen} id={rowId} />
      </Stack>
    </Stack>
  )
}

export default ApplyCropInsurance

```
- - - - -

`src/pages/dashboard/apply/crop-insurance/usePage.tsx`
```javascript
import { useState } from 'react'
import { createColumnHelper } from '@tanstack/react-table'
import { useMutation, useQuery } from '@tanstack/react-query'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { acceptApplications, getAllApplications } from '@/apis/applications'
import { Badge } from '../style'
import dayjs from 'dayjs'
import { DATE_FORMAT } from '@/constants/format'
import { CheckStatus } from './components/status'
import { useLocation, useNavigate } from 'react-router-dom'
import type { Apply } from '@/types/apply'

const columnHelper = createColumnHelper<Apply>()

export const usePage = () => {
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const navigate = useNavigate()
  const [rowId, setRowId] = useState(null)
  const [open, setOpen] = useState(false)
  const [rejectOpen, setRejectOpen] = useState(false)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const {
    data = {
      count: 0,
      results: [],
    },
    isLoading,
    refetch,
  } = useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_ALL_APPLICATIONS, params],
    queryFn: async () => await getAllApplications({ params, type_code: 1 }),
    select: res => {
      return {
        count: res?.data?.count,
        results: res?.data?.result,
      }
    },
    keepPreviousData: true,
  })

  // const handleOpen = (info: any) => {
  //   setRowId(info?.row?.original?._id)
  //   // setOpen(true)
  // }

  const { mutate } = useMutation({
    mutationFn: async data =>
      await acceptApplications(data, {
        insurance_liability: '10',
      }),
    onSuccess: res => {
      void refetch()
    },
    onError: err => {
      console.log(err)
    },
  })

  const accept = (id: string | any) => {
    mutate(id)
  }

  const reject = (id: string | any) => {
    setRejectOpen(true)
    setRowId(id)
  }

  const columns = [
    columnHelper.accessor('number', {
      cell: info => {
        const currentPage = params?.page
        const limit = params?.limit
        const rowIndex = info?.row?.index
        return (currentPage - 1) * limit + rowIndex + 1
      },
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('name', {
      id: 'apply_status',
      cell: ({ row }: any) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code === true ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Ariza statusi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('farmer_name', {
      header: () => 'Korxona nomi',
      cell: ({ row }) => {
        return <p>{row.original.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('region_name', {
      header: () => <span>Viloyat</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('district_name', {
      header: () => <span>Tuman</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type_name', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }) => {
        return <p>{row.original.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Ariza sanasi</span>,
      cell: ({ row }) => {
        return <p>{dayjs(row.original.date).format(DATE_FORMAT)}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: (info: any) => (
        <CheckStatus
          id={info?.row?.original?._id}
          status_code={info.row.original.status_code}
          accept={() => {
            accept(info?.row?.original?._id)
          }}
          reject={() => {
            reject(info?.row?.original?._id)
          }}
          handleOpen={() => {
            navigate(
              `/main/apply/crop-insurance/form-contract/${info?.row?.original?._id}?number=${info?.row?.original?.number}`,
            )
          }}
          info={info}
        />
      ),
    }),
  ]

  return {
    open,
    data: data.results,
    count: data.count,
    rowId,
    params,
    columns,
    setOpen,
    setParams,
    isLoading,
    rejectOpen,
    setRejectOpen,
  }
}

```
- - - - -

`src/pages/dashboard/apply/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/apply/page.tsx`
```javascript
import { Grid, Stack, Typography } from '@mui/material'
import BreadcrumpCustom from '@/components/breadcrumb'
import { useNavigate } from 'react-router-dom'
import { pages } from './constants'
import { Card, Left, Right } from './style'

const Apply = () => {
  const navigate = useNavigate()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
        {pages.map(({ id, name, Icon, link, show }) => {
          return (
            <Grid item key={id} xs={6} sm={4} md={4}>
              <Card
                onClick={() => {
                  navigate(link)
                }}
              >
                <Left>
                  <Icon />
                </Left>
                <Right>
                  <Typography textAlign='center' fontSize={16} fontFamily='GothamProRegular'>
                    {name}
                  </Typography>
                </Right>
                {!show && (
                  <div className='show'>
                    <span>Jarayonda</span>
                  </div>
                )}
              </Card>
            </Grid>
          )
        })}
      </Grid>
    </Stack>
  )
}

export default Apply

```
- - - - -

`src/pages/dashboard/apply/style.ts`
```ts
import styled from '@emotion/styled'

export const Badge = styled('span')`
  background-color: rgba(8, 112, 95, 0.2);
  border-radius: 4px;
  font-variant-numeric: lining-nums tabular-nums;
  font-family: 'GothamProRegular';
  font-size: 14px;
  font-style: normal;
  line-height: 20px;
  padding: 4px 8px;
  color: var(--Green);
  white-space: nowrap;
  &.in_progress {
    color: #f2994a;
    background-color: rgba(242, 153, 74, 0.2);
  }
  &.canceled {
    background-color: rgba(235, 87, 87, 0.2);
    color: #eb5757;
  }
`

export const Card = styled('div')`
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 100px;
  padding: 32px;
  border-radius: 3px;
  background: #fff;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease-in-out;

  .show {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(2px);
    cursor: default;
    transform: translateY(100%);

    span {
      color: #fff;
      border: 2px solid #eee;
      border-radius: 8px;
      padding: 0 8px;
    }
  }
  &:hover {
    .show {
      transform: translateY(0);
      transition: all 0.2s ease-in-out;
    }
  }
`

export const Left = styled('div')`
  width: 20%;
`
export const Right = styled('div')`
  width: 80%;
`

```
- - - - -

`src/pages/dashboard/bank-lending/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/bank-lending/page.tsx`
```javascript
const BankLending = () => {
  return <div>BankLending started</div>
}

export default BankLending

```
- - - - -

`src/pages/dashboard/contracts/constants.ts`
```ts
import { ReactComponent as IconApply } from '@/assets/icons/apply.svg'
import { ReactComponent as IconScoring } from '@/assets/icons/scoring.svg'

export const pages = [
  {
    id: 1,
    name: 'Kreditni qoplash sug’urtasi',
    Icon: IconApply,
    link: 'coverage-insurance',
    disabled: false,
  },
  { id: 2, name: 'Xosil sug’urtasi', Icon: IconScoring, link: 'crop-insurance', disabled: true },
]

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/create/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/create/page.tsx`
```javascript
import { Button, Grid, Stack } from '@mui/material'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { PaperWrapper } from './style'
import { Form, useNavigate, useParams } from 'react-router-dom'
import { useMutation, useQuery } from '@tanstack/react-query'
import { contractGenerateDoc } from '@/apis/contracts'
import DocViewer, { DocViewerRenderers } from '@cyntler/react-doc-viewer'
import { useMemo, useState } from 'react'
import { LoadingOverlay } from '@/components/loading-overlay'
import toast from 'react-hot-toast'
import { request } from '@/configs/requests'

interface FormValues {
  status_plan: string
  percent: string
  comment: string
}

const CreateCoverageInsurance = () => {
  const { id } = useParams()
  const form = useForm<FormValues>()
  const navigate = useNavigate()
  const [docs, setDocs] = useState<any[]>([])
  const object = new URLSearchParams(document.location.search)
  const socialParams = Object.fromEntries(object.entries())

  const { isLoading } = useQuery({
    queryKey: ['GENERATE-DOC', id],
    queryFn: async () => await contractGenerateDoc(id),
    select: res => res?.data?.link,
    onSuccess: res => {
      setDocs([
        {
          uri: res,
          fileType: 'docx',
          fileName: 'test.docx',
        },
      ])
    },
    onError: () => {
      toast.error('Nimdur xatolik yuz berdi!')
    },
  })

  const { mutate, isLoading: isLoadingAccept } = useMutation({
    mutationFn: async data => await request.post(`/contract/action/${id}`, data),
    onSuccess: res => {
      navigate('/main/contracts/coverage-insurance')
      toast.success('Shartnoma holati muvaffaqiyatli o`zgardi!')
    },
    onError: () => {
      toast.error('Nimdur xatolik yuz berdi!')
    },
  })

  const onCreate: SubmitHandler<FormValues> = data => {
    const payload: any = {
      action: 'accept',
    }
    mutate(payload)
  }

  const memoizedDocs = useMemo(() => {
    return docs
  }, [docs])

  return (
    <Stack
      width='100%'
      borderRadius='16px'
      p='24px'
      mx='auto'
      gap='24px'
      bgcolor={theme => theme.palette.allColors.WHITE}
    >
      <Form onSubmit={form.handleSubmit(onCreate)}>
        <Grid container>
          <Grid item xs={12} sm={12} md={12}>
            <PaperWrapper>
              <DocViewer
                documents={memoizedDocs}
                pluginRenderers={DocViewerRenderers}
                style={{ height: 750 }}
                config={{
                  header: {
                    disableHeader: true,
                  },
                }}
              />
            </PaperWrapper>
          </Grid>
        </Grid>
        {socialParams?.status === 'created' && (
          <Stack direction='row' width='100%' padding='24px 0' justifyContent='flex-start'>
            <Button sx={{ backgroundColor: '#08705F' }} type='submit'>
              Tasdiqlash
            </Button>
          </Stack>
        )}
      </Form>
      <LoadingOverlay isLoading={isLoading || isLoadingAccept} />
    </Stack>
  )
}

export default CreateCoverageInsurance

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/create/style.ts`
```ts
import styled from '@emotion/styled'

export const PaperWrapper = styled('div')`
  padding: 24px;
  background-color: var(--Gray-1);
  border-radius: 12px;
  min-height: 848px;
`
export const Paper = styled('div')`
  width: 100%;
  height: 297mm;
  background-color: var(--main-white);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
`

export const Content = styled('div')`
  padding: 32px;
`

export const Form = styled('form')``
export const FormHeader = styled('div')`
  display: flex;
  gap: 4px;
`

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/page.tsx`
```javascript
import { CustomTable } from '@/components/table'
import { Stack } from '@mui/material'
import { usePage } from './usePage'
import { Filter } from '@/components/filter'
import { CustomPagination } from '@/components/pagination'
import { LoadingOverlay } from '@/components/loading-overlay'
import BreadcrumpCustom from '@/components/breadcrumb'

const CoverageInsurance = () => {
  const { data, count, params, columns, setParams, isLoading, isFetching } = usePage()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack gap='32px'>
        <Filter />
        <Stack
          width='100%'
          borderRadius='12px'
          p='32px 24px'
          mx='auto'
          gap='24px'
          bgcolor={theme => theme.palette.allColors.WHITE}
        >
          <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
          {data.length > 0 && (
            <CustomPagination params={params} setParams={setParams} count={count} />
          )}
        </Stack>
        <LoadingOverlay isLoading={isLoading || isFetching} />
      </Stack>
    </Stack>
  )
}

export default CoverageInsurance

```
- - - - -

`src/pages/dashboard/contracts/coverage-insurance/usePage.tsx`
```javascript
/* eslint-disable quotes */
import { getAllContracts } from '@/apis/contracts'
import { DATE_FORMAT } from '@/constants/format'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { ROUTER } from '@/constants/router'
import { Badge } from '@/styles/global'
import { Button } from '@mui/material'
import { useQuery } from '@tanstack/react-query'
import { createColumnHelper } from '@tanstack/react-table'
import dayjs from 'dayjs'
import { useState } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'

interface IColumns {
  number: string | number
  name: string
  farmer_name?: string
  region?: string
  district?: string
  type?: string
  date?: string
  check_status?: string
  status_code: boolean
  status_name: string
}

const columnHelper = createColumnHelper<IColumns>()

export const usePage = () => {
  const navigate = useNavigate()
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const {
    data = {
      count: 0,
      results: [],
    },
    isLoading,
    isFetching,
  } = useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_ALL_CONTRACTS, params],
    queryFn: async () => await getAllContracts({ params, type_code: 2 }),
    select: res => {
      return {
        count: res?.data?.count,
        results: res?.data?.result,
      }
    },
    keepPreviousData: true,
  })

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('status_name', {
      id: 'status_name',
      cell: ({ row }) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Ariza statusi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('farmer_name', {
      header: () => 'Korxona nomi',
      cell: ({ row }: any) => {
        return <p>{row.original.application?.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('region', {
      header: () => <span>Viloyat</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.region}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('district', {
      header: () => <span>Tuman</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.district}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Ariza sanasi</span>,
      cell: ({ row }: any) => {
        return <p>{dayjs(row.original?.application?.date).format(DATE_FORMAT)}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: ({ row }: any) => {
        return (
          <>
            {row.original?.status_code || row?.original?.status_name === 'Rad etildi' ? (
              <Button
                variant='outlined'
                sx={{
                  width: 108,
                  height: 36,
                  color: 'var(--Green)',
                  borderRadius: '4px',
                  cursor: 'pointer',
                }}
                onClick={() => {
                  navigate(
                    `${ROUTER.CREATE}/${row?.original?._id}?status=${row?.original?.status_code ? 'accepted' : 'canceled'}`,
                  )
                }}
              >
                Ko'rish
              </Button>
            ) : (
              <Button
                variant='outlined'
                sx={{
                  width: 108,
                  height: 36,
                  color: 'var(--Green)',
                  borderRadius: '4px',
                  cursor: 'pointer',
                }}
                onClick={() => {
                  navigate(
                    `${ROUTER.CREATE}/${row?.original?._id}?status=${row?.original?.status_code === null ? 'created' : 'created'}`,
                  )
                }}
              >
                Belgilash
              </Button>
            )}
          </>
        )
      },
    }),
  ]

  return {
    data: data.results,
    count: data.count,
    params,
    columns,
    setParams,
    isLoading,
    isFetching,
  }
}

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/contracts/index.ts`
```ts
import { request } from '@/configs/requests'

export const getAllContracts = async ({ params, type_code }: any) => {
  return await request('/contract/get/filtered', {
    params: {
      page: params.page,
      limit: params.limit,
      type_code,
    },
  })
}
export const acceptContract = async <T>(id: T) => {
  return await request(`/contract/accept/${id}`)
}

export const contractGenerateDoc = async <T>(id: T) => {
  return await request(`/contract/generate-doc/${id}`)
}

export const contractDetail = async <T>(id: T) => {
  return await request(`/contract/get/${id}`)
}

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/create/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/create/page.tsx`
```javascript
/* eslint-disable @tanstack/query/exhaustive-deps */
import { Button, Grid, Stack } from '@mui/material'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { PaperWrapper } from './style'
import { Form, useNavigate, useParams } from 'react-router-dom'
import { useMutation, useQuery } from '@tanstack/react-query'
import { contractGenerateDoc } from '@/apis/contracts'
import DocViewer, { DocViewerRenderers } from '@cyntler/react-doc-viewer'
import { useState, useMemo } from 'react'
import { LoadingOverlay } from '@/components/loading-overlay'
import toast from 'react-hot-toast'
import { request } from '@/configs/requests'
import BreadcrumpCustom from '@/components/breadcrumb'

interface FormValues {
  status_plan: string
  percent: string
  comment: string
}

const CreateCropInsurance = () => {
  const { id } = useParams()
  const form = useForm<FormValues>()
  const navigate = useNavigate()
  const [docs, setDocs] = useState<any[]>([])
  const object = new URLSearchParams(document.location.search)
  const socialParams = Object.fromEntries(object.entries())

  const { isLoading } = useQuery({
    queryKey: ['GENERATE-DOC'],
    queryFn: async () => await contractGenerateDoc(id),
    select: res => res?.data?.link,
    onSuccess: res => {
      setDocs([
        {
          uri: res,
          fileType: 'docx',
          fileName: 'test.docx',
        },
      ])
    },
    onError: () => {
      toast.error('Nimdur xatolik yuz berdi!')
    },
  })

  const { mutate, isLoading: isLoadingAccept } = useMutation({
    mutationFn: async data => await request.post(`/contract/action/${id}`, data),
    onSuccess: res => {
      navigate('/main/contracts/crop-insurance')
      toast.success('Shartnoma holati muvaffaqiyatli o`zgartirildi!')
    },
    onError: () => {
      toast.error('Nimadur xatolik yuz berdi!')
    },
  })

  const onCreate: SubmitHandler<FormValues> = data => {
    const payload: any = {
      action: 'accept',
    }
    mutate(payload)
  }

  const memoizedDocs = useMemo(() => {
    return docs
  }, [docs])

  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack
        width='100%'
        borderRadius='16px'
        p='24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <Form onSubmit={form.handleSubmit(onCreate)}>
          <Grid container>
            <Grid item xs={12} sm={12} md={12}>
              <PaperWrapper>
                <DocViewer
                  documents={memoizedDocs}
                  pluginRenderers={DocViewerRenderers}
                  style={{ height: 750 }}
                  config={{
                    header: {
                      disableHeader: true,
                    },
                  }}
                />
              </PaperWrapper>
            </Grid>
          </Grid>
          {socialParams?.status === 'created' ? (
            <Stack direction='row' width='100%' padding='24px 0' justifyContent='flex-start'>
              <Button sx={{ backgroundColor: '#08705F' }} type='submit'>
                Tasdiqlash
              </Button>
            </Stack>
          ) : (
            <Stack
              direction='row'
              width='100%'
              padding='24px 0'
              justifyContent='flex-start'
              gap='16px'
            >
              <a href={memoizedDocs?.[0]?.uri} download={true} target='_blank' rel='noreferrer'>
                <Button
                  variant='outlined'
                  sx={{ color: '#08705F', border: '1px solid #08705F !important', opacity: 0.7 }}
                >
                  Yuklab olish
                </Button>
              </a>
            </Stack>
          )}
        </Form>
        <LoadingOverlay isLoading={isLoading || isLoadingAccept} />
      </Stack>
    </Stack>
  )
}

export default CreateCropInsurance

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/create/style.ts`
```ts
import styled from '@emotion/styled'

export const PaperWrapper = styled('div')`
  padding: 24px;
  background-color: var(--Gray-1);
  border-radius: 12px;
  min-height: 848px;
`
export const Paper = styled('div')`
  width: 100%;
  height: 297mm;
  background-color: var(--main-white);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
`

export const Content = styled('div')`
  padding: 32px;
`

export const Form = styled('form')``
export const FormHeader = styled('div')`
  display: flex;
  gap: 4px;
`

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/page.tsx`
```javascript
import { CustomTable } from '@/components/table'
import { Stack } from '@mui/material'
import { usePage } from './usePage'
import { CustomPagination } from '@/components/pagination'
import { LoadingOverlay } from '@/components/loading-overlay'
import BreadcrumpCustom from '@/components/breadcrumb'

const ContractCropInsurance = () => {
  const { data, count, params, columns, setParams, isLoading, isFetching } = usePage()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack gap='32px'>
        <Stack
          width='100%'
          borderRadius='12px'
          p='32px 24px'
          mx='auto'
          gap='24px'
          bgcolor={theme => theme.palette.allColors.WHITE}
        >
          <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
          {data.length > 0 && (
            <CustomPagination params={params} setParams={setParams} count={count} />
          )}
        </Stack>
        <LoadingOverlay isLoading={isLoading || isFetching} />
      </Stack>
    </Stack>
  )
}

export default ContractCropInsurance

```
- - - - -

`src/pages/dashboard/contracts/crop-insurance/usePage.tsx`
```javascript
/* eslint-disable quotes */
import { getAllContracts } from '@/apis/contracts'
import { DATE_FORMAT } from '@/constants/format'
import { REACT_QUERY_KEYS } from '@/constants/react-query-keys'
import { ROUTER } from '@/constants/router'
import { Badge } from '@/styles/global'
import { Button, Typography } from '@mui/material'
import { useQuery } from '@tanstack/react-query'
import { createColumnHelper } from '@tanstack/react-table'
import dayjs from 'dayjs'
import { useState } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'

interface IColumns {
  number: string | number
  name: string
  farmer_name?: string
  region?: string
  district?: string
  type?: string
  date?: string
  check_status?: string
  status_code: boolean
  status_name: string
  comment: string
}

const columnHelper = createColumnHelper<IColumns>()

export const usePage = () => {
  const navigate = useNavigate()
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const {
    data = {
      count: 0,
      results: [],
    },
    isLoading,
    isFetching,
  } = useQuery({
    queryKey: [REACT_QUERY_KEYS.GET_ALL_CONTRACTS, params],
    queryFn: async () => await getAllContracts({ params, type_code: 1 }),
    select: res => {
      return {
        count: res?.data?.count,
        results: res?.data?.result,
      }
    },
    keepPreviousData: true,
  })

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('status_name', {
      id: 'status_name',
      cell: ({ row }) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Ariza statusi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('farmer_name', {
      header: () => 'Korxona nomi',
      cell: ({ row }: any) => {
        return <p>{row.original.application?.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('region', {
      header: () => <span>Viloyat</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.region_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('district', {
      header: () => <span>Tuman</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.district_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }: any) => {
        return <p>{row.original.application?.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Ariza sanasi</span>,
      cell: ({ row }: any) => {
        return <p>{dayjs(row.original?.application?.date).format(DATE_FORMAT)}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('comment', {
      header: () => <span>Komment</span>,
      cell: ({ row }: any) => {
        return (
          <Typography sx={{ textAlign: 'center', fontFamily: 'GothamProRegular', fontSize: 14 }}>
            {row?.original?.user_acceptance?.comment ?? '-'}
          </Typography>
        )
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: ({ row }: any) => {
        return (
          <>
            {row.original?.status_code || row?.original?.status_name === 'Rad etildi' ? (
              <Button
                variant='outlined'
                sx={{
                  width: 108,
                  height: 36,
                  color: 'var(--Green)',
                  borderRadius: '4px',
                  cursor: 'pointer',
                }}
                onClick={() => {
                  navigate(
                    `${ROUTER.CREATE}/${row?.original?._id}?status=${row?.original?.status_code ? 'accepted' : 'canceled'}`,
                  )
                }}
              >
                Ko'rish
              </Button>
            ) : (
              <Button
                variant='outlined'
                sx={{
                  width: 108,
                  height: 36,
                  color: 'var(--Green)',
                  borderRadius: '4px',
                  cursor: 'pointer',
                }}
                onClick={() => {
                  navigate(
                    `${ROUTER.CREATE}/${row?.original?._id}?status=${row?.original?.status_code === null ? 'created' : 'created'}`,
                  )
                }}
              >
                Belgilash
              </Button>
            )}
          </>
        )
      },
    }),
  ]

  return {
    data: data.results,
    count: data.count,
    params,
    columns,
    setParams,
    isLoading,
    isFetching,
  }
}

```
- - - - -

`src/pages/dashboard/contracts/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/contracts/page.tsx`
```javascript
import { Grid, Stack, Typography } from '@mui/material'
import { useNavigate } from 'react-router-dom'
import { Card, Left, Right } from './style'
import { pages } from './constants'
import BreadcrumpCustom from '@/components/breadcrumb'

const Contracts = () => {
  const navigate = useNavigate()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
        {pages.map(({ id, name, Icon, link }) => {
          return (
            <Grid item key={id} xs={6} sm={4} md={4}>
              <Card
                onClick={() => {
                  navigate(link)
                }}
              >
                <Left>
                  <Icon />
                </Left>
                <Right>
                  <Typography textAlign='center' fontSize={16} fontFamily='GothamProRegular'>
                    {name}
                  </Typography>
                </Right>
              </Card>
            </Grid>
          )
        })}
      </Grid>
    </Stack>
  )
}

export default Contracts

```
- - - - -

`src/pages/dashboard/contracts/style.ts`
```ts
import styled from '@emotion/styled'

export const Card = styled('div')`
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 100px;
  padding: 32px;
  border-radius: 3px;
  background: #fff;
  cursor: pointer;
`
export const Left = styled('div')`
  width: 20%;
`
export const Right = styled('div')`
  width: 80%;
`

```
- - - - -

`src/pages/dashboard/crop-location/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/crop-location/page.tsx`
```javascript
const CropLocation = () => {
  return <div>CropLocation started</div>
}

export default CropLocation

```
- - - - -

`src/pages/dashboard/documents/constants.ts`
```ts
import { ReactComponent as IconPolis } from '@/assets/icons/polis.svg'
import { ReactComponent as IconContractDocuments } from '@/assets/icons/contract-documents.svg'

export const pages = [
  { id: 1, name: 'Polis', Icon: IconPolis, link: 'polis', disabled: false },
  {
    id: 2,
    name: 'Shartnomalar hisoboti',
    Icon: IconContractDocuments,
    link: 'contract-documents',
    disabled: true,
  },
  { id: 3, name: 'Statistika', Icon: IconContractDocuments, link: 'statistics', disabled: false },
]

```
- - - - -

`src/pages/dashboard/documents/contract-documents/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/documents/contract-documents/page.tsx`
```javascript
const ContractDocuments = () => {
  return <div></div>
}

export default ContractDocuments

```
- - - - -

`src/pages/dashboard/documents/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/documents/page.tsx`
```javascript
import { Grid, Stack, Typography } from '@mui/material'
import { pages } from './constants'
import { Card, Left, Right } from './style'
import { useNavigate } from 'react-router-dom'
import BreadcrumpCustom from '@/components/breadcrumb'

const Documents = () => {
  const navigate = useNavigate()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
        {pages.map(({ id, name, Icon, link }) => {
          return (
            <Grid item key={id} xs={6} sm={4} md={4}>
              <Card
                onClick={() => {
                  navigate(link)
                }}
              >
                <Left>
                  <Icon />
                </Left>
                <Right>
                  <Typography textAlign='center' fontSize={16} fontFamily='GothamProRegular'>
                    {name}
                  </Typography>
                </Right>
              </Card>
            </Grid>
          )
        })}
      </Grid>
    </Stack>
  )
}

export default Documents

```
- - - - -

`src/pages/dashboard/documents/polis/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/documents/polis/page.tsx`
```javascript
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomPagination } from '@/components/pagination'
import { CustomTable } from '@/components/table'
import { Stack } from '@mui/material'
import { usePage } from './usePage'

const Polis = () => {
  const { data, params, columns, setParams } = usePage()

  return (
    <Stack gap='32px'>
      <Stack
        width='100%'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
        <CustomPagination count={data.length} params={params} setParams={setParams} />
      </Stack>
      <LoadingOverlay isLoading={false} />
    </Stack>
  )
}

export default Polis

```
- - - - -

`src/pages/dashboard/documents/polis/usePage.tsx`
```javascript
import { Button } from '@mui/material'
import { createColumnHelper } from '@tanstack/react-table'
import { useState } from 'react'
import { useLocation } from 'react-router-dom'

interface IColumn {
  number: number
  apply_number: string
  type_name: string
  date: string
  view_polis?: any
}

const columnHelper = createColumnHelper<IColumn>()

export const usePage = () => {
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('apply_number', {
      header: () => <span>Ariza raqami</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Sana</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type_name', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }) => {
        return <p>{row.original.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('view_polis', {
      header: () => <span>Polisni ko'rish</span>,
      cell: () => {
        return (
          <Button
            variant='outlined'
            sx={{
              color: '#60676D',
              borderRadius: '4px',
              border: '1px solid #E7E7E7',
              width: 115,
              height: 32,
            }}
          >
            Ko'rish
          </Button>
        )
      },
      footer: info => info.column.id,
    }),
  ]

  const data: IColumn[] = [
    {
      number: 1,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 2,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 3,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 4,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 5,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 6,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 7,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 8,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 9,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
    {
      number: 10,
      apply_number: '24022024',
      date: '24.02.2024',
      type_name: 'Xosil sug’urta',
    },
  ]

  return {
    data,
    params,
    columns,
    setParams,
  }
}

```
- - - - -

`src/pages/dashboard/documents/statistics/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/documents/statistics/page.tsx`
```javascript
const Statistics = () => {
  return <div></div>
}

export default Statistics

```
- - - - -

`src/pages/dashboard/documents/style.ts`
```ts
import styled from '@emotion/styled'

export const Card = styled('div')`
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 100px;
  padding: 32px;
  border-radius: 3px;
  background: #fff;
  cursor: pointer;
`
export const Left = styled('div')`
  width: 20%;
`
export const Right = styled('div')`
  width: 80%;
`

```
- - - - -

`src/pages/dashboard/home/constants.ts`
```ts
import { ReactComponent as IconApply } from '@/assets/icons/apply.svg'
import { ReactComponent as IconScoring } from '@/assets/icons/scoring.svg'
import { ReactComponent as IconContracts } from '@/assets/icons/contracts.svg'
import { ReactComponent as IconLandAreas } from '@/assets/icons/land-areas.svg'
import { ReactComponent as IconCropLocation } from '@/assets/icons/crop-location.svg'
import { ReactComponent as IconBankLending } from '@/assets/icons/bank-lending.svg'
import { ReactComponent as IconMonitoring } from '@/assets/icons/monitoring.svg'
import { ReactComponent as IconAgroActivities } from '@/assets/icons/agro-activities.svg'
import { ReactComponent as IconStatistics } from '@/assets/icons/statistics.svg'
import { ReactComponent as IconTechnicSupport } from '@/assets/icons/technical-support.svg'
import { ReactComponent as IconDocuments } from '@/assets/icons/documents.svg'

export const pages = [
  { id: 1, name: 'Arizalar', Icon: IconApply, link: 'apply', disabled: false, show: true },
  { id: 2, name: 'Skoring', Icon: IconScoring, link: '/main', disabled: true, show: false },
  {
    id: 3,
    name: 'Shartnomalar',
    Icon: IconContracts,
    link: 'contracts',
    disabled: false,
    show: true,
  },
  {
    id: 4,
    name: 'Yer maydonlari',
    Icon: IconLandAreas,
    link: '/main',
    disabled: true,
    show: false,
  },
  {
    id: 5,
    name: 'Ekin joylashuvi',
    Icon: IconCropLocation,
    link: '/main',
    disabled: true,
    show: false,
  },
  {
    id: 6,
    name: 'Bank kreditlash',
    Icon: IconBankLending,
    link: '/main',
    disabled: true,
    show: false,
  },
  { id: 7, name: 'Monitoring', Icon: IconMonitoring, link: '/main', disabled: true, show: false },
  {
    id: 8,
    name: 'Agrotexnik tadbirlar',
    Icon: IconAgroActivities,
    link: '/main',
    disabled: true,
    show: false,
  },
  {
    id: 10,
    name: 'To‘lov holati',
    Icon: IconStatistics,
    link: 'payment-status',
    disabled: false,
    show: true,
  },
  {
    id: 11,
    name: 'Texnik yordam',
    Icon: IconTechnicSupport,
    link: 'technical-support',
    disabled: true,
    show: true,
  },
  {
    id: 12,
    name: 'Hisobotlar',
    Icon: IconDocuments,
    link: 'documents',
    disabled: true,
    show: true,
  },
]

```
- - - - -

`src/pages/dashboard/home/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/home/page.tsx`
```javascript
import { Grid, Stack, Typography } from '@mui/material'
import { pages } from './constants'
import { Card, Left, Right } from './style'
import { useNavigate } from 'react-router-dom'
import BreadcrumpCustom from '@/components/breadcrumb'

const Home = () => {
  const navigate = useNavigate()

  return (
    <Stack>
      <BreadcrumpCustom />
      <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
        {pages.map(({ id, name, Icon, link, show }) => {
          return (
            <Grid item key={id} xs={6} sm={4} md={4}>
              <Card
                onClick={() => {
                  navigate(link)
                }}
              >
                <Left>
                  <Icon />
                </Left>
                <Right>
                  <Typography textAlign='center' fontSize={16} fontFamily='GothamProRegular'>
                    {name}
                  </Typography>
                </Right>
                {!show && (
                  <div className='show'>
                    <span>Jarayonda</span>
                  </div>
                )}
              </Card>
            </Grid>
          )
        })}
      </Grid>
    </Stack>
  )
}

export default Home

```
- - - - -

`src/pages/dashboard/home/style.ts`
```ts
import styled from '@emotion/styled'

export const Card = styled('div')`
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 100px;
  padding: 32px;
  border-radius: 3px;
  background: #fff;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease-in-out;

  .show {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
    border-radius: 3px;
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(2px);
    cursor: default;
    transform: translateY(100%);

    span {
      color: #fff;
      border: 2px solid #eee;
      border-radius: 8px;
      padding: 0 8px;
    }
  }
  &:hover {
    .show {
      transform: translateY(0);
      transition: all 0.2s ease-in-out;
    }
  }
`
export const Left = styled('div')`
  width: 20%;
`
export const Right = styled('div')`
  width: 80%;
`

```
- - - - -

`src/pages/dashboard/land-areas/components/anomalous-area/index.tsx`
```javascript
export const AnomalousArea = () => {
  return <div>AnomalousArea</div>
}

```
- - - - -

`src/pages/dashboard/land-areas/components/ndvi/index.tsx`
```javascript
export const NDVI = () => {
  return <div>ndvi started</div>
}

```
- - - - -

`src/pages/dashboard/land-areas/components/pointers/index.tsx`
```javascript
import { Input } from '@/components/inputs/input'
import { Grid } from '@mui/material'
import { useForm } from 'react-hook-form'

export const Pointers = () => {
  const form = useForm()

  return (
    <Grid container spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>
      <Grid item xs={6} sm={4} md={4}>
        <Input
          control={form.control}
          name='company_name'
          placeholder='Korxona nomi'
          label='Korxona nomi'
        />
      </Grid>
      <Grid item xs={6} sm={4} md={4}>
        <Input
          control={form.control}
          name='area'
          placeholder='Maydoni'
          label='Maydoni'
          type='number'
        />
      </Grid>
      <Grid item xs={6} sm={4} md={4}>
        <Input control={form.control} name='pin' placeholder='INN' label='INN' />
      </Grid>
      <Grid item xs={6} sm={4} md={4}>
        <Input
          control={form.control}
          name='cadastr_number'
          placeholder='Kadastr raqami'
          label='Kadastr raqami'
          type='number'
        />
      </Grid>
      <Grid item xs={6} sm={4} md={4}>
        <Input
          control={form.control}
          name='example_number'
          placeholder='Namuna raqami'
          label='Namuna raqami'
          type='number'
        />
      </Grid>
      <Grid item xs={6} sm={4} md={4}>
        <Input
          control={form.control}
          name='crop_type'
          placeholder='Hosil turi'
          label='Hosil turi'
        />
      </Grid>
    </Grid>
  )
}

```
- - - - -

`src/pages/dashboard/land-areas/components/soil-analysis/index.tsx`
```javascript
export const SoilAnalysis = () => {
  return <div>soil analysis</div>
}

```
- - - - -

`src/pages/dashboard/land-areas/components/tabs/index.tsx`
```javascript
import * as React from 'react'
import Tabs from '@mui/material/Tabs'
import Tab from '@mui/material/Tab'
import Box from '@mui/material/Box'
import { styled } from '@mui/material/styles'
import { Pointers } from '../pointers'
import { NDVI } from '../ndvi'
import { Weather } from '../weather'
import { AnomalousArea } from '../anomalous-area'
import { SoilAnalysis } from '../soil-analysis'

interface TabPanelProps {
  children?: React.ReactNode
  index: number
  value: number
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props

  return (
    <div
      role='tabpanel'
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  )
}

function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  }
}

// Custom Tab styling
const StyledTabs = styled(Tabs)({
  '& .MuiTabs-indicator': {
    backgroundColor: '#2F847C', // Green underline
    height: '3px',
  },
})

const StyledTab = styled(Tab)(({ theme }) => ({
  fontFamily: 'GothamProRegular',
  fontWeight: 400,
  textTransform: 'none',
  fontSize: '14px',
  color: '#000', // Default color for inactive tabs
  '&.Mui-selected': {
    fontWeight: 600, // Bold for active tab
    color: '#2F847C', // Green color for active tab
  },
}))

export const CustomTabs = () => {
  const [value, setValue] = React.useState(0)

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue)
  }

  return (
    <Box sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <StyledTabs value={value} onChange={handleChange} aria-label='custom styled tabs'>
          <StyledTab label="Ko'rsatgichlari" {...a11yProps(0)} />
          <StyledTab label='NDVI' {...a11yProps(1)} />
          <StyledTab label='Ob-havo' {...a11yProps(2)} />
          <StyledTab label='Anamal hudud' {...a11yProps(3)} />
          <StyledTab label='Tuproq tahlili' {...a11yProps(4)} />
        </StyledTabs>
      </Box>
      <CustomTabPanel value={value} index={0}>
        <Pointers />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={1}>
        <NDVI />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={2}>
        <Weather />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={3}>
        <AnomalousArea />
      </CustomTabPanel>
      <CustomTabPanel value={value} index={4}>
        <SoilAnalysis />
      </CustomTabPanel>
    </Box>
  )
}

```
- - - - -

`src/pages/dashboard/land-areas/components/tabs/style.ts`
```ts

```
- - - - -

`src/pages/dashboard/land-areas/components/weather/index.tsx`
```javascript
export const Weather = () => {
  return <div>weather</div>
}

```
- - - - -

`src/pages/dashboard/land-areas/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/land-areas/page.tsx`
```javascript
import { Stack } from '@mui/material'
import BreadcrumpCustom from '@/components/breadcrumb'
import { CustomTabs } from './components/tabs'

const LandAreas = () => {
  return (
    <Stack>
      <BreadcrumpCustom />
      <Stack
        width='100%'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <CustomTabs />
      </Stack>
    </Stack>
  )
}

export default LandAreas

```
- - - - -

`src/pages/dashboard/legal-opinion/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/legal-opinion/page.tsx`
```javascript
const LegalOpinion = () => {
  return <div>LegalOpinion started</div>
}

export default LegalOpinion

```
- - - - -

`src/pages/dashboard/monitoring/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/monitoring/page.tsx`
```javascript
const Monitoring = () => {
  return <div>Monitoring started</div>
}

export default Monitoring

```
- - - - -

`src/pages/dashboard/payment-status/components/change-status/index.tsx`
```javascript
export const ChangeStatus = () => {
  return <div>ChangeStatus</div>
}

```
- - - - -

`src/pages/dashboard/payment-status/components/form/index.tsx`
```javascript
import { Input } from '@/components/inputs/input'
import { CustomModal } from '@/components/modal'
import { COLORS } from '@/constants/css'
import { Button, Grid, Stack } from '@mui/material'
import { type SubmitHandler, useForm } from 'react-hook-form'
import { Form } from 'react-router-dom'

interface ISetPayStatus {
  open: boolean
  setOpen: React.Dispatch<React.SetStateAction<boolean>>
}

interface FormValues {
  apply_number: string
  payment_date: string
  inn: number
  contract_number: number
  price: string
}

export const SetPaymentStatus = ({ open, setOpen }: ISetPayStatus) => {
  const form = useForm<FormValues>()

  const onSet: SubmitHandler<FormValues> = data => {
    console.log(data)
  }

  return (
    <CustomModal
      open={open}
      setOpen={setOpen}
      title='Proweb korxonasining to’lov holatini belgilash'
      maxWidth='md'
    >
      <Form onSubmit={form.handleSubmit(onSet)}>
        <Grid container spacing={{ xs: 2, md: 2 }}>
          <Grid item xs={6} sm={4} md={4}>
            <Input
              control={form.control}
              name='apply_number'
              placeholder='Ariza raqami'
              label='Ariza raqami'
            />
          </Grid>
          <Grid item xs={6} sm={4} md={4}>
            <Input
              control={form.control}
              name='payment_date'
              placeholder='To’lov sanasi'
              label='To’lov sanasi'
            />
          </Grid>
          <Grid item xs={6} sm={4} md={4}>
            <Input control={form.control} name='inn' placeholder='INN' label='INN' type='number' />
          </Grid>
          <Grid item xs={6} sm={4} md={4}>
            <Input
              control={form.control}
              name='contract_number'
              placeholder='Shartnoma raqami'
              label='Shartnoma raqami'
              type='number'
            />
          </Grid>
          <Grid item xs={6} sm={4} md={4}>
            <Input control={form.control} name='price' placeholder='Summa' label='Summa' />
          </Grid>
        </Grid>
        <Stack direction='row' sx={{ paddingTop: '32px' }} spacing={2}>
          <Button
            variant='outlined'
            sx={{
              color: COLORS.RED,
              borderRadius: '8px',
              border: `1.5px solid ${COLORS.RED} !important`,
            }}
          >
            To’lov amalga oshirilmagan
          </Button>
          <Button variant='contained' sx={{ background: '#08705F', opacity: 0.7 }} type='submit'>
            To’lov amalga oshirilgan
          </Button>
        </Stack>
      </Form>
    </CustomModal>
  )
}

```
- - - - -

`src/pages/dashboard/payment-status/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/payment-status/page.tsx`
```javascript
import { LoadingOverlay } from '@/components/loading-overlay'
import { CustomPagination } from '@/components/pagination'
import { CustomTable } from '@/components/table'
import { Stack } from '@mui/material'
import { usePage } from './usePage'
import { SetPaymentStatus } from './components/form'
import BreadcrumpCustom from '@/components/breadcrumb'

const PaymentStatus = () => {
  const { open, data, params, columns, setOpen, setParams } = usePage()

  return (
    <Stack gap='32px'>
      <BreadcrumpCustom />
      <Stack
        width='100%'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
        <CustomPagination params={params} setParams={setParams} count={data.length} />
      </Stack>
      <LoadingOverlay isLoading={false} />
      <SetPaymentStatus open={open} setOpen={setOpen} />
    </Stack>
  )
}

export default PaymentStatus

```
- - - - -

`src/pages/dashboard/payment-status/style.ts`
```ts
import styled from '@emotion/styled'

export const Card = styled('div')`
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 100px;
  padding: 32px;
  border-radius: 3px;
  background: #fff;
  cursor: pointer;
`
export const Left = styled('div')`
  width: 20%;
`
export const Right = styled('div')`
  width: 80%;
`

```
- - - - -

`src/pages/dashboard/payment-status/usePage.tsx`
```javascript
/* eslint-disable quotes */
import { Badge } from '@/styles/global'
import { Button } from '@mui/material'
import { createColumnHelper } from '@tanstack/react-table'
import { useState } from 'react'
import { useLocation } from 'react-router-dom'

interface IColumns {
  number: number
  apply_number: string
  status_name: string
  status_code: boolean | null
  farmer_name: string
  type_name: string
  date: string
  check_status?: string
  price: number
}

const columnHelper = createColumnHelper<IColumns>()

export const usePage = () => {
  const [open, setOpen] = useState(false)
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('status_name', {
      id: 'status_name',
      cell: ({ row }: any) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code === true ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Statusi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('apply_number', {
      header: () => 'Ariza raqami',
      cell: ({ row }) => {
        return <p>{row.original.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('farmer_name', {
      header: () => 'Korxona nomi',
      cell: ({ row }) => {
        return <p>{row.original.farmer_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Sana</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('type_name', {
      header: () => <span>Sug’urta turi</span>,
      cell: ({ row }) => {
        return <p>{row.original.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('price', {
      header: () => <span>Summa</span>,
      cell: ({ row }) => {
        return <p>{row.original.type_name}</p>
      },
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: () => (
        <Button
          variant='outlined'
          sx={{
            color: '#60676D',
            borderRadius: '4px',
            border: '1px solid #E7E7E7',
            width: 115,
            height: 32,
          }}
          onClick={() => {
            setOpen(true)
          }}
        >
          Belgilash
        </Button>
      ),
    }),
  ]

  const data: IColumns[] = [
    {
      number: 1,
      apply_number: '24022024',
      status_name: "Ro'yxatdan o'tdi",
      status_code: true,
      farmer_name: 'MCHJ',
      type_name: 'Xosil sug’urta',
      date: '24.02.2024',
      price: 256000,
    },
    {
      number: 2,
      apply_number: '24022024',
      status_name: 'Bekor qilingan',
      status_code: false,
      farmer_name: 'MCHJ',
      type_name: 'Xosil sug’urta',
      date: '24.02.2024',
      price: 256000,
    },
  ]

  return {
    open,
    data,
    params,
    columns,
    setOpen,
    setParams,
  }
}

```
- - - - -

`src/pages/dashboard/scoring/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/scoring/page.tsx`
```javascript
const Scoring = () => {
  return <div>Scoring started</div>
}

export default Scoring

```
- - - - -

`src/pages/dashboard/statistics/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/statistics/page.tsx`
```javascript
const Contracts = () => {
  return <div>Contracts started</div>
}

export default Contracts

```
- - - - -

`src/pages/dashboard/technical-support/index.ts`
```ts
export { default } from './page'

```
- - - - -

`src/pages/dashboard/technical-support/page.tsx`
```javascript
import { Stack } from '@mui/material'
import { CustomTable } from '@/components/table'
import { CustomPagination } from '@/components/pagination'
import { LoadingOverlay } from '@/components/loading-overlay'
import { usePage } from './usePage'
import BreadcrumpCustom from '@/components/breadcrumb'

const TechnicalSupport = () => {
  const { data, params, columns, setParams } = usePage()

  return (
    <Stack gap='32px'>
      <BreadcrumpCustom />
      <Stack
        width='100%'
        borderRadius='12px'
        p='32px 24px'
        mx='auto'
        gap='24px'
        bgcolor={theme => theme.palette.allColors.WHITE}
      >
        <CustomTable options={{ data, columns }} emptyTitle="Ma'lumot mavjud emas!" />
        <CustomPagination params={params} setParams={setParams} count={data.length} />
      </Stack>
      <LoadingOverlay isLoading={false} />
    </Stack>
  )
}

export default TechnicalSupport

```
- - - - -

`src/pages/dashboard/technical-support/usePage.tsx`
```javascript
import { Badge } from '@/styles/global'
import { Button } from '@mui/material'
import { createColumnHelper } from '@tanstack/react-table'
import { useState, type ReactNode } from 'react'
import { useLocation } from 'react-router-dom'

interface IColumns {
  number: number
  status_name: string
  status_code: boolean | null
  apply_number: string
  login: string
  date: string
  check_status?: ReactNode
}

const columnHelper = createColumnHelper<IColumns>()

export const usePage = () => {
  const { search } = useLocation()
  const initial_params = new URLSearchParams(search)
  const [params, setParams] = useState({
    page: initial_params.has('page') ? Number(initial_params.get('page')) : 1,
    limit: initial_params.has('limit') ? Number(initial_params.get('limit')) : 10,
  })

  const columns = [
    columnHelper.accessor('number', {
      cell: info => info.row.index + 1,
      header: () => <span>№</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('status_name', {
      id: 'status_name',
      cell: ({ row }) => {
        return (
          <Badge
            className={`${row.original.status_code === null ? 'in_progress' : row.original?.status_code ? 'success' : 'canceled'}`}
          >
            {row.original?.status_name}
          </Badge>
        )
      },
      header: () => <span>Status</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('apply_number', {
      id: 'apply_number',
      header: () => <span>Ariza raqami</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('login', {
      id: 'login',
      header: () => <span>login</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('date', {
      header: () => <span>Ariza sanasi</span>,
      footer: info => info.column.id,
    }),
    columnHelper.accessor('check_status', {
      header: () => <span>Statusni belgilash</span>,
      footer: info => info.column.id,
      cell: () => (
        <Button
          variant='outlined'
          sx={{
            width: 108,
            height: 36,
            color: 'var(--Green)',
            borderRadius: '4px',
            cursor: 'pointer',
          }}
        >
          Belgilash
        </Button>
      ),
    }),
  ]

  const data: IColumns[] = [
    {
      number: 1,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 2,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 3,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 4,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 5,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 6,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
    {
      number: 7,
      status_name: 'Kelib tushgan',
      status_code: false,
      apply_number: '24022024',
      login: 'Proweb',
      date: '24.02.2024',
    },
  ]

  return { data, params, columns, setParams }
}

```
- - - - -

`src/router/index.ts`
```ts
export { router } from './router'

```
- - - - -

`src/router/router.tsx`
```javascript
import { lazy } from 'react'
import { ROUTER } from '@/constants/router'
import Layout from '@/layout'
import { createBrowserRouter } from 'react-router-dom'

const Auth = lazy(async () => await import('@/pages/auth'))
const NotFound = lazy(async () => await import('@/pages/404'))
const Home = lazy(async () => await import('@/pages/dashboard/home'))
const Apply = lazy(async () => await import('@/pages/dashboard/apply'))
const Contracts = lazy(async () => await import('@/pages/dashboard/contracts'))
const CoverageInsurance = lazy(
  async () => await import('@/pages/dashboard/contracts/coverage-insurance'),
)
const CreateCoverageInsurance = lazy(
  async () => await import('@/pages/dashboard/contracts/coverage-insurance/create'),
)
const PaymentStatus = lazy(async () => await import('@/pages/dashboard/payment-status'))
const Documents = lazy(async () => await import('@/pages/dashboard/documents'))
const Polis = lazy(async () => await import('@/pages/dashboard/documents/polis'))
const TechnicalSupport = lazy(async () => await import('@/pages/dashboard/technical-support'))
// const LandAreas = lazy(
//   async () => await import('@/pages/dashboard/apply/crop-insurance/land-areas'),
// )
const ApplyCropInsurance = lazy(async () => await import('@/pages/dashboard/apply/crop-insurance'))

const FormContract = lazy(
  async () => await import('@/pages/dashboard/apply/crop-insurance/form-contract'),
)

const ApplyCoverageInsurance = lazy(
  async () => await import('@/pages/dashboard/apply/coverage-insurance'),
)
const ContractCropInsurance = lazy(
  async () => await import('@/pages/dashboard/contracts/crop-insurance'),
)
const CreateCropInsurance = lazy(
  async () => await import('@/pages/dashboard/contracts/crop-insurance/create'),
)

export const router = createBrowserRouter([
  {
    path: ROUTER.AUTH,
    element: <Layout />,
    children: [
      {
        index: true,
        element: <Auth />,
      },
      {
        path: ROUTER.HOME,
        children: [
          {
            index: true,
            element: <Home />,
          },
          {
            path: ROUTER.APPLY,
            children: [
              {
                index: true,
                element: <Apply />,
              },
              {
                path: ROUTER.CROP_INSURANCE,
                children: [
                  {
                    index: true,
                    element: <ApplyCropInsurance />,
                  },
                  {
                    path: `${ROUTER.FORM_CONTRACT}/:id`,
                    element: <FormContract />,
                  },
                ],
              },
              {
                path: ROUTER.COVERAGE_INSURANCE,
                element: <ApplyCoverageInsurance />,
              },
            ],
          },
          {
            path: ROUTER.CONTRACTS,
            children: [
              {
                index: true,
                element: <Contracts />,
              },
              {
                path: ROUTER.COVERAGE_INSURANCE,
                children: [
                  {
                    index: true,
                    element: <CoverageInsurance />,
                  },
                  {
                    path: `${ROUTER.CREATE}/:id`,
                    element: <CreateCoverageInsurance />,
                  },
                ],
              },
              {
                path: ROUTER.CROP_INSURANCE,
                children: [
                  {
                    index: true,
                    element: <ContractCropInsurance />,
                  },
                  {
                    path: `${ROUTER.CREATE}/:id`,
                    element: <CreateCropInsurance />,
                  },
                ],
              },
            ],
          },
          {
            path: ROUTER.PAYMENT_STATUS,
            element: <PaymentStatus />,
          },
          {
            path: ROUTER.DOCUMENTS,
            children: [
              {
                index: true,
                element: <Documents />,
              },
              {
                path: ROUTER.POLIS,
                element: <Polis />,
              },
            ],
          },

          {
            path: ROUTER.TECHNICAL_SUPPORT,
            element: <TechnicalSupport />,
          },
        ],
      },
    ],
  },
  {
    path: ROUTER.NOT_FOUND,
    element: <NotFound />,
  },
])

```
- - - - -

`src/store/apply/index.ts`
```ts
import { create } from 'zustand'

interface ApplicationStoreProps {
  landTabs: number
  setLandTabs: (payload: number) => void
}

export const useApplicationStore = create<ApplicationStoreProps>(set => ({
  landTabs: 0,
  setLandTabs: (payload: number) => {
    set({ landTabs: payload })
  },
}))

```
- - - - -

`src/store/geojson/index.ts`
```ts
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'

// Geometry type
interface Geometry {
  type: string
  coordinates: number[][][][]
}

// Properties type
interface FeatureProperties {
  name: string
  id: number
  area: number
  cad_number: string
  contour_number: number
  plant_id: number
  farmer_name: string
  ball_bonitet: number
  farmer_tax_number: string
}

// Feature type
interface Feature {
  geometry: Geometry
  properties: FeatureProperties
  type: string
}

// Data type
interface Data {
  features: Feature[]
}

// Root type
interface LandData {
  data: Data
  number: number
  geojson: string
  landId: string
}

interface IGeoJsonStore {
  geojson: null | LandData
  setGeoJson: (payload: null | LandData) => void
}

export const useGeoJsonStore = create<IGeoJsonStore>()(
  persist(
    set => ({
      geojson: null,
      setGeoJson: payload => {
        set(() => ({ geojson: payload }))
      },
    }),
    {
      name: 'geojson-storage', // LocalStorage yoki AsyncStorage uchun kalit nomi
      storage: createJSONStorage(() => localStorage), // Mahalliy xotira uchun saqlash
    },
  ),
)

```
- - - - -

`src/store/user/index.ts`
```ts
import { create } from '@/configs/zustand'
import { type MyFormValues } from '@/types/user'

interface UserStoreProps {
  users: MyFormValues[]
  setUser: (user: MyFormValues) => void
  deleteUser: (userId: string) => void
  updateUser: (updatedUser: MyFormValues) => void
}

export const useUserStore = create<UserStoreProps>(set => ({
  users: [],
  setUser: user => {
    set(state => ({ users: [...state.users, user] }))
  },
  deleteUser: userId => {
    set(state => ({
      users: state.users.filter(user => user.id !== userId),
    }))
  },
  updateUser: updatedUser => {
    set(state => ({
      users: state.users.map(user => (user.id === updatedUser?.id ? updatedUser : user)),
    }))
  },
}))

```
- - - - -

`src/styles/global.ts`
```ts
import styled from '@emotion/styled'

export const Badge = styled('span')`
  background-color: rgba(8, 112, 95, 0.2);
  border-radius: 4px;
  font-variant-numeric: lining-nums tabular-nums;
  font-family: 'GothamProRegular';
  font-size: 14px;
  font-style: normal;
  line-height: 20px;
  padding: 4px 8px;
  color: var(--Green);
  white-space: nowrap;
  &.in_progress {
    color: #f2994a;
    background-color: rgba(242, 153, 74, 0.2);
  }
  &.canceled {
    background-color: rgba(235, 87, 87, 0.2);
    color: #eb5757;
  }
`

```
- - - - -

`src/types/apply.ts`
```ts
export interface Apply {
  number: number
  name: string
  farmer_name: string
  region: string
  district: string
  region_name: string
  district_name: string
  type_name: string
  date: string
  check_status?: string
}

```
- - - - -

`src/types/components.ts`
```ts
import { type Dayjs } from 'dayjs'
import { type SwitchProps } from '@mui/material/Switch'
import { type MaskedInputProps } from 'react-text-mask'
import { type CheckboxProps } from '@mui/material/Checkbox'
import { type TextFieldProps } from '@mui/material/TextField'
import { type Theme, type SxProps } from '@mui/material/styles'
import { type SelectProps as MuiSelectProps } from '@mui/material/Select'
import { type FormControlLabelProps } from '@mui/material/FormControlLabel'
import { type TimePickerProps, type DateTimePickerProps } from '@mui/x-date-pickers'
import type { Path, Control, FieldValues, UseControllerProps } from 'react-hook-form'
import { type ReactNode, type DetailedHTMLProps, type TextareaHTMLAttributes } from 'react'

export interface OptionProps {
  value: string | number
  label: string | number
  description?: string | null
}

export interface ControlProps<T extends FieldValues> extends UseControllerProps<T> {
  name: Path<T>
  control: Control<T>
}

export type InputProps<T extends FieldValues> = Omit<TextFieldProps, 'variant' | 'id'> &
  ControlProps<T>

export type InputPasswordProps<T extends FieldValues> = Omit<
  TextFieldProps,
  'type' | 'autoComplete' | 'id'
> &
  ControlProps<T>

export type InputMaskProps<T extends FieldValues> = Omit<
  TextFieldProps,
  'autoComplete' | 'variant' | 'id'
> &
  Omit<MaskedInputProps, 'render'> &
  ControlProps<T>

export type InputPhoneProps<T extends FieldValues> = Omit<
  TextFieldProps,
  'autoComplete' | 'variant' | 'id'
> &
  Omit<MaskedInputProps, 'render' | 'mask'> &
  ControlProps<T>

export type InputCheckboxProps<T extends FieldValues> = Exclude<CheckboxProps, 'sx'> &
  Pick<FormControlLabelProps, 'label' | 'labelPlacement' | 'sx' | 'disabled'> &
  ControlProps<T> & {
    error?: boolean
  }

export type InputSwicthProps<T extends FieldValues> = Exclude<SwitchProps, 'sx'> &
  Pick<FormControlLabelProps, 'label' | 'labelPlacement' | 'sx' | 'disabled'> &
  ControlProps<T>

export type InputTimePickerProps<T extends FieldValues> = TimePickerProps<Dayjs> & ControlProps<T>
export type InputDateProps<T extends FieldValues> = DateTimePickerProps<Dayjs> & ControlProps<T>
export type InputTextareaProps<T extends FieldValues> = {
  disabled?: boolean
  sx?: SxProps<Theme>
  labelMinimum?: string
  label?: string | ReactNode
} & DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement> &
  ControlProps<T>

export type SelectProps<T extends FieldValues> = Omit<
  MuiSelectProps,
  'value' | 'renderValue' | 'variant' | 'onChange' | 'defaultValue'
> & {
  options: OptionProps[]
  placeholder?: string
  loading?: boolean
} & ControlProps<T>

export type InputSearchProps = Omit<TextFieldProps, 'variant' | 'type' | 'onChange'> & {
  onChange?: (e: string) => void
  variant?: 'outlined' | 'contained'
}

export type UploadImageProps<T extends FieldValues> = ControlProps<T>
export type UploadLogoProps<T extends FieldValues> = ControlProps<T>
export type UploadExcelProps<T extends FieldValues> = ControlProps<T>

```
- - - - -

`src/types/credit-area.ts`
```ts
export interface CreditAreaContour {
  data: {
    features: Array<{
      geometry: {
        type: string // e.g., "Polygon"
        coordinates: number[][][] // 3D array for polygon coordinates
      }
      properties: {
        name: string
        id: number
        area: number
        cad_number: string
        contour_number: number
        plant_id: number
        farmer_name: string
        ball_bonitet: number
        farmer_tax_number: string
      }
      type: string // e.g., "Feature"
    }>
  }
  number: number
  geojson: string
  landId: string
}

```
- - - - -

`src/types/error.ts`
```ts
export interface ErrorProps {
  status: number
  response: { data: { code: number; message: string; errors: string[] }; status: number }
}

```
- - - - -

`src/types/georaster.d.ts`
```ts
declare module 'georaster'

```
- - - - -

`src/types/header.ts`
```ts
export interface HeaderItem {
  id: number
  name: string
  path: string
}

```
- - - - -

`src/types/hoc.ts`
```ts
import { type ReactNode } from 'react'

export interface HocProps {
  children: ReactNode
}

```
- - - - -

`src/types/leaflet-fullscreen.d.ts`
```ts
import * as L from 'leaflet'

declare module 'leaflet' {
  export interface MapOptions {
    fullscreenControl?: boolean
    fullscreenControlOptions?: FullscreenOptions
  }

  interface FullscreenOptions {
    position?: ControlPosition
    title?: string
    titleCancel?: string
    content?: string
    forceSeparateButton?: boolean
    forcePseudoFullscreen?: boolean
    fullscreenElement?: false | HTMLElement
  }
}

```
- - - - -

`src/types/meteo.ts`
```ts
export interface Station {
  id: number
  name: string
  location: {
    type: string
    coordinates: [number, number] // Longitude va Latitude
  }
  distance: number
}

export interface SoilData {
  depth1: number | null // Maʼlumot bo'lmasligi mumkin
  depth2: number | null
  depth3: number | null
  depth4: number | null
}

export interface LatestData {
  soilMoisture: SoilData
  soilTemperature: SoilData
  _id: string
  stationId: number
  stationName: string
  datetime: string // ISO formatdagi vaqt
  raw: {
    StationId: number
    StationName: string
    SoilMoisture1: number | null
    SoilMoisture2: number | null
    SoilMoisture3: number | null
    SoilMoisture4: number | null
    SoilTemp1: number | null
    SoilTemp2: number | null
    SoilTemp3: number | null
    SoilTemp4: number | null
    datetime: string
  }
  createdAt: string
  updatedAt: string
  __v: number
}

export interface StationData {
  station: Station
  latestData: LatestData
}

```
- - - - -

`src/types/modal.ts`
```ts
import type { Dispatch, ReactNode, SetStateAction } from 'react'

export interface IModal {
  title?: string
  open: boolean
  setOpen: Dispatch<SetStateAction<boolean>>
  children?: ReactNode
  maxWidth?: 'lg' | 'md' | 'sm' | 'xs'
  id?: string | null
  fullScreen?: boolean
}

```
- - - - -

`src/types/pagination.ts`
```ts
export interface ICustomPagination {
  count: number
  params: {
    page?: number
    limit?: number
  }
  setParams: React.Dispatch<
    React.SetStateAction<{
      page: number
      limit: number
    }>
  >
}

```
- - - - -

`src/types/params.ts`
```ts
import { type Params } from 'react-router-dom'

export interface ParamProps extends Params {
  mailingId: string
  categoryId: string
  customerId: string
  roboMarketAppId: string
}

```
- - - - -

`src/types/poligon.ts`
```ts
export interface KMLExtraData {
  mObjectId: number
  mObjectName: string
  fromDate: string
  toDate: string
  fromPoint: number
  toPoint: number
  kmlPointCount: number
  kmlDistance: string
  events: {
    kmlExtraDataEventList: string[]
  }
  distance: number
}

export interface KMLStyle {
  id: string
  kmlLineStyle: {
    color: string
    width: number
  }
}

export interface KMLPlacemark {
  name: null | string
  styleUrl: string
  kmlTrack: {
    kmlWhenList: number[]
    kmlCoordList: Array<[number, number]>
    kmlAngelsList: number[]
    kmlSpeedList: number[]
  }
}

export interface ParkingPin {
  timestamp: number
  lat: number
  lon: number
  trackDate: string
  trackTime: string
  dateReceived: string
  timeReceived: string
  parkingTime: string
  address: null | string
  sdParkingPopup: string
}

export interface KMLData {
  kmlExtraDataList: {
    kmlExtraDataList: KMLExtraData[]
  }
  kmlStyleList: KMLStyle[]
  kmlFolder: {
    kmlPlacemarkList: KMLPlacemark[]
  }
  parkingPins: ParkingPin[]
}

```
- - - - -

`src/types/table.tsx`
```javascript
import { type TableOptions } from '@tanstack/react-table'

export interface TableProps<T extends object> {
  isLoading?: boolean
  isFetching?: boolean
  emptyTitle?: string
  isExpanded?: boolean
  onRowClick?: (row: T) => void
  options: Omit<TableOptions<T>, 'getCoreRowModel' | 'getPaginationRowModel'>
}

```
- - - - -

`src/types/user.ts`
```ts
export interface Phone {
  phone: string | null
}

export interface MyFormValues {
  id?: string | null
  checkbox?: boolean | null
  firstname: string
  name: string
  country?: string | null
  language?: string | null
  phones?: Phone[] | null
}

```
- - - - -

`src/utils/convert-geojson.ts`
```ts
// @ts-nocheck
import CryptoJS from 'crypto-js'

export const decryptBuffer = (encryptedBuffer: any, key: string): any => {
  try {
    const wordArray = CryptoJS.enc.Base64.parse(encryptedBuffer)
    const decrypted = CryptoJS.AES.decrypt({ ciphertext: wordArray }, key)
    const decryptedText = decrypted.toString(CryptoJS.enc.Utf8)
    return JSON.parse(decryptedText)
  } catch (error) {
    console.error('Shifrlashni ochish xatosi:', error)
    return null
  }
}

```
- - - - -

`src/utils/create-emotion-cache.ts`
```ts
import createCache from '@emotion/cache'

const isBrowser = typeof document !== 'undefined'

export default function createEmotionCache() {
  let insertionPoint

  if (isBrowser) {
    const emotionInsertionPoint = document.querySelector<HTMLMetaElement>(
      'meta[name="emotion-insertion-point"]',
    )
    insertionPoint = emotionInsertionPoint ?? undefined
  }

  return createCache({ key: 'mui-style', insertionPoint })
}

```
- - - - -

`src/utils/status.ts`
```ts
/* eslint-disable quotes */
export const getStatus = (status: number) => {
  switch (status) {
    case 1:
      return 'Jarayonda'
    case 2:
      return "Ro'yxatdan o'tdi"
    default:
      return 'Bekor qilingan'
  }
}

```
- - - - -

`src/utils/user.ts`
```ts
export const getUser = () => {
  return localStorage.getItem('token')
}

```
- - - - -

`src/vite-env.d.ts`
```ts
/// <reference types="vite/client" />
/// <reference types="unplugin-fonts/client" />
/// <reference types="vite-plugin-svgr/client" />

import '@tanstack/react-table'
import { type SxProps } from '@mui/material'
import { type ConnectDropTarget, type ConnectDragSource } from 'react-dnd'

interface ImportMetaEnv {
  readonly VITE_API_BASE_URL_YANDEX: string
  readonly VITE_API_YANDEX_KEY: string
  readonly VITE_API_SOCKET_BASE_URL: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

declare module '@tanstack/table-core' {
  interface ColumnMeta<TData extends RowData, TValue> {
    getCellContext: (context: CellContext<TData, TValue>) => { sx?: SxProps }
  }
  interface CellContext<TData extends RowData, TValue> {
    dragRef: ConnectDragSource
    dropRef: ConnectDropTarget
    isDragging: boolean
  }
}

```
- - - - -
